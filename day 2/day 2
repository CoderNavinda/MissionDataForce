{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:43.026405Z",
     "iopub.status.busy": "2022-03-28T09:48:43.025676Z",
     "iopub.status.idle": "2022-03-28T09:48:43.038049Z",
     "shell.execute_reply": "2022-03-28T09:48:43.037087Z",
     "shell.execute_reply.started": "2022-03-28T07:10:49.437189Z"
    },
    "papermill": {
     "duration": 0.099764,
     "end_time": "2022-03-28T09:48:43.038309",
     "exception": false,
     "start_time": "2022-03-28T09:48:42.938545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/data-storm-30/validation_data.csv\n",
      "/kaggle/input/data-storm-30/train_data.csv\n",
      "/kaggle/input/data-storm-30/test_data.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "        \n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:43.193143Z",
     "iopub.status.busy": "2022-03-28T09:48:43.192023Z",
     "iopub.status.idle": "2022-03-28T09:48:43.196397Z",
     "shell.execute_reply": "2022-03-28T09:48:43.195377Z",
     "shell.execute_reply.started": "2022-03-28T07:10:49.454693Z"
    },
    "papermill": {
     "duration": 0.082885,
     "end_time": "2022-03-28T09:48:43.196618",
     "exception": false,
     "start_time": "2022-03-28T09:48:43.113733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## we import library 'warnings' to handle any warnings that may surface\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.07575,
     "end_time": "2022-03-28T09:48:43.361420",
     "exception": false,
     "start_time": "2022-03-28T09:48:43.285670",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Preprocessing of Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.0733,
     "end_time": "2022-03-28T09:48:43.508245",
     "exception": false,
     "start_time": "2022-03-28T09:48:43.434945",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Extracting the data into dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:43.659345Z",
     "iopub.status.busy": "2022-03-28T09:48:43.658591Z",
     "iopub.status.idle": "2022-03-28T09:48:43.719773Z",
     "shell.execute_reply": "2022-03-28T09:48:43.718810Z",
     "shell.execute_reply.started": "2022-03-28T07:10:49.472490Z"
    },
    "papermill": {
     "duration": 0.137312,
     "end_time": "2022-03-28T09:48:43.719940",
     "exception": false,
     "start_time": "2022-03-28T09:48:43.582628",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Obtaining the file paths for the input data for analysis\n",
    "train_filepath = \"/kaggle/input/data-storm-30/train_data.csv\"\n",
    "vali_filepath = \"/kaggle/input/data-storm-30/validation_data.csv\"\n",
    "test_filepath = \"/kaggle/input/data-storm-30/test_data.csv\"\n",
    "\n",
    "# Extracting the input files into dataframes\n",
    "train_file = pd.read_csv(train_filepath)\n",
    "vali_file = pd.read_csv(vali_filepath)\n",
    "test_file  = pd.read_csv(test_filepath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:43.874083Z",
     "iopub.status.busy": "2022-03-28T09:48:43.873117Z",
     "iopub.status.idle": "2022-03-28T09:48:43.884653Z",
     "shell.execute_reply": "2022-03-28T09:48:43.885158Z",
     "shell.execute_reply.started": "2022-03-28T07:10:49.500047Z"
    },
    "papermill": {
     "duration": 0.092215,
     "end_time": "2022-03-28T09:48:43.885342",
     "exception": false,
     "start_time": "2022-03-28T09:48:43.793127",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>DateID</th>\n",
       "      <th>DailySales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>category_2</td>\n",
       "      <td>117610</td>\n",
       "      <td>11/6/2021</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>category_4</td>\n",
       "      <td>836584</td>\n",
       "      <td>11/18/2021</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>category_1</td>\n",
       "      <td>370195</td>\n",
       "      <td>1/24/2022</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>category_2</td>\n",
       "      <td>172582</td>\n",
       "      <td>10/30/2021</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1006009</td>\n",
       "      <td>10/30/2021</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  CategoryCode  ItemCode      DateID  DailySales\n",
       "0   category_2    117610   11/6/2021           7\n",
       "1   category_4    836584  11/18/2021          16\n",
       "2   category_1    370195   1/24/2022           6\n",
       "3   category_2    172582  10/30/2021           5\n",
       "4   category_2   1006009  10/30/2021           5"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# display top rows of training and validation data\n",
    "train_file.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:44.036219Z",
     "iopub.status.busy": "2022-03-28T09:48:44.035533Z",
     "iopub.status.idle": "2022-03-28T09:48:44.045317Z",
     "shell.execute_reply": "2022-03-28T09:48:44.045854Z",
     "shell.execute_reply.started": "2022-03-28T07:10:49.518658Z"
    },
    "papermill": {
     "duration": 0.088345,
     "end_time": "2022-03-28T09:48:44.046043",
     "exception": false,
     "start_time": "2022-03-28T09:48:43.957698",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>Week</th>\n",
       "      <th>WeeklySales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1044502</td>\n",
       "      <td>w1</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1105009</td>\n",
       "      <td>w1</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>category_2</td>\n",
       "      <td>913561</td>\n",
       "      <td>w4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>category_1</td>\n",
       "      <td>1048975</td>\n",
       "      <td>w4</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>category_1</td>\n",
       "      <td>17287</td>\n",
       "      <td>w2</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  CategoryCode  ItemCode Week  WeeklySales\n",
       "0   category_2   1044502   w1           11\n",
       "1   category_2   1105009   w1           11\n",
       "2   category_2    913561   w4            5\n",
       "3   category_1   1048975   w4           30\n",
       "4   category_1     17287   w2           60"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vali_file.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:44.195936Z",
     "iopub.status.busy": "2022-03-28T09:48:44.195262Z",
     "iopub.status.idle": "2022-03-28T09:48:44.219764Z",
     "shell.execute_reply": "2022-03-28T09:48:44.220293Z",
     "shell.execute_reply.started": "2022-03-28T07:10:49.537400Z"
    },
    "papermill": {
     "duration": 0.101298,
     "end_time": "2022-03-28T09:48:44.220480",
     "exception": false,
     "start_time": "2022-03-28T09:48:44.119182",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "# checking the number of rows with missing values in each of the dataframes\n",
    "\n",
    "# training set\n",
    "print(pd.isnull(train_file.CategoryCode).sum())    # Checking null values in CategoryCode \n",
    "print(pd.isnull(train_file.ItemCode).sum())        # Checking null values in ItemCode \n",
    "print(pd.isnull(train_file.DateID).sum())          # Checking null values in DateID \n",
    "print(pd.isnull(train_file.DailySales).sum())      # Checking null values in DailySales\n",
    "\n",
    "# validation set\n",
    "print(pd.isnull(vali_file.CategoryCode).sum())     # Checking null values in CategoryCode \n",
    "print(pd.isnull(vali_file.ItemCode).sum())         # Checking null values in ItemCode \n",
    "print(pd.isnull(vali_file.Week).sum())             # Checking null values in Week \n",
    "print(pd.isnull(vali_file.WeeklySales).sum())      # Checking null values in WeeklySales\n",
    "\n",
    "# test set\n",
    "print(pd.isnull(test_file.CategoryCode).sum())     # Checking null values in CategoryCode \n",
    "print(pd.isnull(test_file.ItemCode).sum())         # Checking null values in ItemCode \n",
    "print(pd.isnull(test_file.Week).sum())             # Checking null values in Week "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.075913,
     "end_time": "2022-03-28T09:48:44.370701",
     "exception": false,
     "start_time": "2022-03-28T09:48:44.294788",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "There no missing data in any of the columns. Therefore there are no missing data inputs we have to impute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:44.524273Z",
     "iopub.status.busy": "2022-03-28T09:48:44.523531Z",
     "iopub.status.idle": "2022-03-28T09:48:44.529062Z",
     "shell.execute_reply": "2022-03-28T09:48:44.529571Z",
     "shell.execute_reply.started": "2022-03-28T07:10:49.558175Z"
    },
    "papermill": {
     "duration": 0.083451,
     "end_time": "2022-03-28T09:48:44.529746",
     "exception": false,
     "start_time": "2022-03-28T09:48:44.446295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CategoryCode    object\n",
       "ItemCode         int64\n",
       "DateID          object\n",
       "DailySales       int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# data types in train data\n",
    "train_file.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:44.690968Z",
     "iopub.status.busy": "2022-03-28T09:48:44.689922Z",
     "iopub.status.idle": "2022-03-28T09:48:44.694016Z",
     "shell.execute_reply": "2022-03-28T09:48:44.693477Z",
     "shell.execute_reply.started": "2022-03-28T07:10:49.571826Z"
    },
    "papermill": {
     "duration": 0.087139,
     "end_time": "2022-03-28T09:48:44.694173",
     "exception": false,
     "start_time": "2022-03-28T09:48:44.607034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# creating copies to the data files we use\n",
    "train = train_file.copy()\n",
    "vali = vali_file.copy()\n",
    "test = test_file.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.076209,
     "end_time": "2022-03-28T09:48:44.846178",
     "exception": false,
     "start_time": "2022-03-28T09:48:44.769969",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Handling of the Date Variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.075756,
     "end_time": "2022-03-28T09:48:44.998327",
     "exception": false,
     "start_time": "2022-03-28T09:48:44.922571",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Since our Test and Validation Data mainly require No of Sales value in quantity units per week, we shall convert our 'DateID' column into Week format.\n",
    "\n",
    "We could use Month as a feature but it will be directly related to the Week number of the year. Hence using only the Week number should be sufficient.\n",
    "\n",
    "Weeks from 39 to 52 represent data collected during the year 2021 and Weeks from 1 to 10 represent the data collected in the year 2022.\n",
    "\n",
    "To allow continuity of the date data from 2021 to 2022, the weeks in the year 2022 (given as 1 to 10) will be adjusted to by adding 52 to each of them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:45.160029Z",
     "iopub.status.busy": "2022-03-28T09:48:45.159308Z",
     "iopub.status.idle": "2022-03-28T09:48:45.188152Z",
     "shell.execute_reply": "2022-03-28T09:48:45.188658Z",
     "shell.execute_reply.started": "2022-03-28T07:10:49.586657Z"
    },
    "papermill": {
     "duration": 0.115972,
     "end_time": "2022-03-28T09:48:45.188857",
     "exception": false,
     "start_time": "2022-03-28T09:48:45.072885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# converting time column in Training Data into a datetime object \n",
    "train['DateID'] = pd.to_datetime(train.DateID)\n",
    "\n",
    "# creating columns for month and week\n",
    "train['Week'] = train.DateID.dt.week"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:45.345123Z",
     "iopub.status.busy": "2022-03-28T09:48:45.344418Z",
     "iopub.status.idle": "2022-03-28T09:48:47.510941Z",
     "shell.execute_reply": "2022-03-28T09:48:47.510325Z",
     "shell.execute_reply.started": "2022-03-28T07:10:49.613698Z"
    },
    "papermill": {
     "duration": 2.247499,
     "end_time": "2022-03-28T09:48:47.511132",
     "exception": false,
     "start_time": "2022-03-28T09:48:45.263633",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# replacing the weeks given for 2022 (which are in the range of 1 to 10) into the raange of 53 to 62\n",
    "for idx in train.index:\n",
    "    if train.loc[idx,'Week'] <= 10:\n",
    "        train.loc[idx,'Week'] = train.loc[idx,'Week'] + 52"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:47.668116Z",
     "iopub.status.busy": "2022-03-28T09:48:47.667076Z",
     "iopub.status.idle": "2022-03-28T09:48:47.671397Z",
     "shell.execute_reply": "2022-03-28T09:48:47.670734Z",
     "shell.execute_reply.started": "2022-03-28T07:10:51.790340Z"
    },
    "papermill": {
     "duration": 0.086533,
     "end_time": "2022-03-28T09:48:47.671547",
     "exception": false,
     "start_time": "2022-03-28T09:48:47.585014",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "52    1087\n",
       "51    1072\n",
       "48    1062\n",
       "54    1055\n",
       "49    1054\n",
       "50    1053\n",
       "47    1050\n",
       "53    1039\n",
       "45    1027\n",
       "57    1020\n",
       "46    1016\n",
       "55    1015\n",
       "56    1014\n",
       "43    1011\n",
       "44    1009\n",
       "40     992\n",
       "58     978\n",
       "41     974\n",
       "42     938\n",
       "39     455\n",
       "Name: Week, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.Week.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.074562,
     "end_time": "2022-03-28T09:48:47.820979",
     "exception": false,
     "start_time": "2022-03-28T09:48:47.746417",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We can see that incomplete week 39 (1st October - 3rd october 2021) has 455 datapoints while all the other weeks have values ranging from 900-1100.\n",
    "\n",
    "Therefore we can choose to omit the data points for week 39 from our training, or we can adjust proportionally the datapoints for each itemcode up to 7/3 times for the whole week instead of 3 days."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.074496,
     "end_time": "2022-03-28T09:48:47.970870",
     "exception": false,
     "start_time": "2022-03-28T09:48:47.896374",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "##### for this method we will remove the the data points from week 39"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:48.126380Z",
     "iopub.status.busy": "2022-03-28T09:48:48.125632Z",
     "iopub.status.idle": "2022-03-28T09:48:48.143843Z",
     "shell.execute_reply": "2022-03-28T09:48:48.143309Z",
     "shell.execute_reply.started": "2022-03-28T07:10:51.798758Z"
    },
    "papermill": {
     "duration": 0.097864,
     "end_time": "2022-03-28T09:48:48.144004",
     "exception": false,
     "start_time": "2022-03-28T09:48:48.046140",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>DateID</th>\n",
       "      <th>DailySales</th>\n",
       "      <th>Week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>category_2</td>\n",
       "      <td>117610</td>\n",
       "      <td>2021-11-06</td>\n",
       "      <td>7</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>category_4</td>\n",
       "      <td>836584</td>\n",
       "      <td>2021-11-18</td>\n",
       "      <td>16</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>category_1</td>\n",
       "      <td>370195</td>\n",
       "      <td>2022-01-24</td>\n",
       "      <td>6</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>category_2</td>\n",
       "      <td>172582</td>\n",
       "      <td>2021-10-30</td>\n",
       "      <td>5</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1006009</td>\n",
       "      <td>2021-10-30</td>\n",
       "      <td>5</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19912</th>\n",
       "      <td>category_2</td>\n",
       "      <td>75886</td>\n",
       "      <td>2021-10-04</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19915</th>\n",
       "      <td>category_1</td>\n",
       "      <td>36898</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19916</th>\n",
       "      <td>category_2</td>\n",
       "      <td>225259</td>\n",
       "      <td>2021-10-04</td>\n",
       "      <td>4</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19917</th>\n",
       "      <td>category_2</td>\n",
       "      <td>111436</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19920</th>\n",
       "      <td>category_1</td>\n",
       "      <td>371104</td>\n",
       "      <td>2021-10-04</td>\n",
       "      <td>4</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19466 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      CategoryCode  ItemCode     DateID  DailySales  Week\n",
       "0       category_2    117610 2021-11-06           7    44\n",
       "1       category_4    836584 2021-11-18          16    46\n",
       "2       category_1    370195 2022-01-24           6    56\n",
       "3       category_2    172582 2021-10-30           5    43\n",
       "4       category_2   1006009 2021-10-30           5    43\n",
       "...            ...       ...        ...         ...   ...\n",
       "19912   category_2     75886 2021-10-04           1    40\n",
       "19915   category_1     36898 2021-10-12           1    41\n",
       "19916   category_2    225259 2021-10-04           4    40\n",
       "19917   category_2    111436 2021-10-12           1    41\n",
       "19920   category_1    371104 2021-10-04           4    40\n",
       "\n",
       "[19466 rows x 5 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train = train.loc[train.Week > 39]\n",
    "train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.074252,
     "end_time": "2022-03-28T09:48:48.294610",
     "exception": false,
     "start_time": "2022-03-28T09:48:48.220358",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Adding a variable to indiacte the Week Number of a date with respect to its Month"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.074154,
     "end_time": "2022-03-28T09:48:48.443567",
     "exception": false,
     "start_time": "2022-03-28T09:48:48.369413",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Since there maybe patterns in how purchases occur during a month, we might find more sales for certain weeks in the month (such as during the first few days or close to the end of a month).\n",
    "\n",
    "Therefore we will create a feature to obtain the week number of the record date with respect to its month. (Week of the Month)\n",
    "\n",
    "We will consider the week containing the first day of the month as week number 1 for each month."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:48.603966Z",
     "iopub.status.busy": "2022-03-28T09:48:48.603138Z",
     "iopub.status.idle": "2022-03-28T09:48:57.840303Z",
     "shell.execute_reply": "2022-03-28T09:48:57.839694Z",
     "shell.execute_reply.started": "2022-03-28T07:10:51.821746Z"
    },
    "papermill": {
     "duration": 9.320242,
     "end_time": "2022-03-28T09:48:57.840452",
     "exception": false,
     "start_time": "2022-03-28T09:48:48.520210",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>DateID</th>\n",
       "      <th>DailySales</th>\n",
       "      <th>Week</th>\n",
       "      <th>FirstDay</th>\n",
       "      <th>FirstWeekNum</th>\n",
       "      <th>WeekOfMonth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>category_2</td>\n",
       "      <td>117610</td>\n",
       "      <td>2021-11-06</td>\n",
       "      <td>7</td>\n",
       "      <td>44</td>\n",
       "      <td>2021-11-01</td>\n",
       "      <td>44</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>category_4</td>\n",
       "      <td>836584</td>\n",
       "      <td>2021-11-18</td>\n",
       "      <td>16</td>\n",
       "      <td>46</td>\n",
       "      <td>2021-11-01</td>\n",
       "      <td>44</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>category_1</td>\n",
       "      <td>370195</td>\n",
       "      <td>2022-01-24</td>\n",
       "      <td>6</td>\n",
       "      <td>56</td>\n",
       "      <td>2022-01-01</td>\n",
       "      <td>52</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>category_2</td>\n",
       "      <td>172582</td>\n",
       "      <td>2021-10-30</td>\n",
       "      <td>5</td>\n",
       "      <td>43</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>39</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1006009</td>\n",
       "      <td>2021-10-30</td>\n",
       "      <td>5</td>\n",
       "      <td>43</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>39</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19912</th>\n",
       "      <td>category_2</td>\n",
       "      <td>75886</td>\n",
       "      <td>2021-10-04</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>39</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19915</th>\n",
       "      <td>category_1</td>\n",
       "      <td>36898</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>39</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19916</th>\n",
       "      <td>category_2</td>\n",
       "      <td>225259</td>\n",
       "      <td>2021-10-04</td>\n",
       "      <td>4</td>\n",
       "      <td>40</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>39</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19917</th>\n",
       "      <td>category_2</td>\n",
       "      <td>111436</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>39</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19920</th>\n",
       "      <td>category_1</td>\n",
       "      <td>371104</td>\n",
       "      <td>2021-10-04</td>\n",
       "      <td>4</td>\n",
       "      <td>40</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>39</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19466 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      CategoryCode  ItemCode     DateID  DailySales  Week   FirstDay  \\\n",
       "0       category_2    117610 2021-11-06           7    44 2021-11-01   \n",
       "1       category_4    836584 2021-11-18          16    46 2021-11-01   \n",
       "2       category_1    370195 2022-01-24           6    56 2022-01-01   \n",
       "3       category_2    172582 2021-10-30           5    43 2021-10-01   \n",
       "4       category_2   1006009 2021-10-30           5    43 2021-10-01   \n",
       "...            ...       ...        ...         ...   ...        ...   \n",
       "19912   category_2     75886 2021-10-04           1    40 2021-10-01   \n",
       "19915   category_1     36898 2021-10-12           1    41 2021-10-01   \n",
       "19916   category_2    225259 2021-10-04           4    40 2021-10-01   \n",
       "19917   category_2    111436 2021-10-12           1    41 2021-10-01   \n",
       "19920   category_1    371104 2021-10-04           4    40 2021-10-01   \n",
       "\n",
       "       FirstWeekNum  WeekOfMonth  \n",
       "0                44            1  \n",
       "1                44            3  \n",
       "2                52            5  \n",
       "3                39            5  \n",
       "4                39            5  \n",
       "...             ...          ...  \n",
       "19912            39            2  \n",
       "19915            39            3  \n",
       "19916            39            2  \n",
       "19917            39            3  \n",
       "19920            39            2  \n",
       "\n",
       "[19466 rows x 8 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Finding the first day of the given month\n",
    "for idx in train.index: \n",
    "    train.loc[idx,'FirstDay'] = train.loc[idx,'DateID'].replace(day=1)\n",
    "\n",
    "## Finding the week number of the 1st wrt the year\n",
    "train['FirstWeekNum'] = train.FirstDay.dt.week\n",
    "\n",
    "# replacing the weeks given for 2022 (which are in the range of 1 to 10) into the raange of 53 to 62\n",
    "for idx in train.index:\n",
    "    if train.loc[idx,'FirstWeekNum'] <= 10:\n",
    "        train.loc[idx,'FirstWeekNum'] = train.loc[idx,'FirstWeekNum'] + 52\n",
    "\n",
    "## Obtaining the Week of the Month\n",
    "train['WeekOfMonth'] = train.Week - train.FirstWeekNum + 1\n",
    "train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.078407,
     "end_time": "2022-03-28T09:48:57.994416",
     "exception": false,
     "start_time": "2022-03-28T09:48:57.916009",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Handling the date (Week) variable in the validation data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:58.153473Z",
     "iopub.status.busy": "2022-03-28T09:48:58.152430Z",
     "iopub.status.idle": "2022-03-28T09:48:58.160855Z",
     "shell.execute_reply": "2022-03-28T09:48:58.161379Z",
     "shell.execute_reply.started": "2022-03-28T07:11:01.013291Z"
    },
    "papermill": {
     "duration": 0.0902,
     "end_time": "2022-03-28T09:48:58.161580",
     "exception": false,
     "start_time": "2022-03-28T09:48:58.071380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# adding the date features into test data\n",
    "vali['Week'] = vali.Week.replace(\"w1\",59)    #  7th week of 2022\n",
    "vali['Week'] = vali.Week.replace(\"w2\",60)    #  8th week of 2022\n",
    "vali['Week'] = vali.Week.replace(\"w3\",61)    #  9th week of 2022\n",
    "vali['Week'] = vali.Week.replace(\"w4\",62)    # 10th week of 2022"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:58.319825Z",
     "iopub.status.busy": "2022-03-28T09:48:58.318855Z",
     "iopub.status.idle": "2022-03-28T09:48:58.428337Z",
     "shell.execute_reply": "2022-03-28T09:48:58.427669Z",
     "shell.execute_reply.started": "2022-03-28T07:11:01.026150Z"
    },
    "papermill": {
     "duration": 0.187764,
     "end_time": "2022-03-28T09:48:58.428496",
     "exception": false,
     "start_time": "2022-03-28T09:48:58.240732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# adding values for the Week of the Month column\n",
    "for idx in vali.index:\n",
    "    if vali.loc[idx,'Week'] == 59:              # 14th Feb to 20th Feb\n",
    "        vali.loc[idx,'WeekOfMonth'] = 3\n",
    "    elif vali.loc[idx,'Week'] == 60:            # 21st Feb to 27th Feb\n",
    "        vali.loc[idx,'WeekOfMonth'] = 4\n",
    "    elif vali.loc[idx,'Week'] == 61:            # 28th Feb to 6th Mar\n",
    "        vali.loc[idx,'WeekOfMonth'] = 1             # We will approximate this week as the first week of March\n",
    "    elif vali.loc[idx,'Week'] == 62:            # 7th Feb to 13th Mar\n",
    "        vali.loc[idx,'WeekOfMonth'] = 2\n",
    "        \n",
    "vali.WeekOfMonth = vali.WeekOfMonth.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:58.587692Z",
     "iopub.status.busy": "2022-03-28T09:48:58.586644Z",
     "iopub.status.idle": "2022-03-28T09:48:58.600204Z",
     "shell.execute_reply": "2022-03-28T09:48:58.600717Z",
     "shell.execute_reply.started": "2022-03-28T07:11:01.145178Z"
    },
    "papermill": {
     "duration": 0.093476,
     "end_time": "2022-03-28T09:48:58.600890",
     "exception": false,
     "start_time": "2022-03-28T09:48:58.507414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>Week</th>\n",
       "      <th>WeeklySales</th>\n",
       "      <th>WeekOfMonth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1044502</td>\n",
       "      <td>59</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1105009</td>\n",
       "      <td>59</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>category_2</td>\n",
       "      <td>913561</td>\n",
       "      <td>62</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>category_1</td>\n",
       "      <td>1048975</td>\n",
       "      <td>62</td>\n",
       "      <td>30</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>category_1</td>\n",
       "      <td>17287</td>\n",
       "      <td>60</td>\n",
       "      <td>60</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>365</th>\n",
       "      <td>category_2</td>\n",
       "      <td>124954</td>\n",
       "      <td>60</td>\n",
       "      <td>43</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>366</th>\n",
       "      <td>category_2</td>\n",
       "      <td>40759</td>\n",
       "      <td>59</td>\n",
       "      <td>48</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>367</th>\n",
       "      <td>category_1</td>\n",
       "      <td>1090303</td>\n",
       "      <td>59</td>\n",
       "      <td>19</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>368</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1090276</td>\n",
       "      <td>61</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>369</th>\n",
       "      <td>category_1</td>\n",
       "      <td>3418</td>\n",
       "      <td>62</td>\n",
       "      <td>69</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>370 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    CategoryCode  ItemCode  Week  WeeklySales  WeekOfMonth\n",
       "0     category_2   1044502    59           11            3\n",
       "1     category_2   1105009    59           11            3\n",
       "2     category_2    913561    62            5            2\n",
       "3     category_1   1048975    62           30            2\n",
       "4     category_1     17287    60           60            4\n",
       "..           ...       ...   ...          ...          ...\n",
       "365   category_2    124954    60           43            4\n",
       "366   category_2     40759    59           48            3\n",
       "367   category_1   1090303    59           19            3\n",
       "368   category_2   1090276    61            6            1\n",
       "369   category_1      3418    62           69            2\n",
       "\n",
       "[370 rows x 5 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vali"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.077734,
     "end_time": "2022-03-28T09:48:58.755976",
     "exception": false,
     "start_time": "2022-03-28T09:48:58.678242",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Handling the date (Week) variable in the test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:58.917672Z",
     "iopub.status.busy": "2022-03-28T09:48:58.916626Z",
     "iopub.status.idle": "2022-03-28T09:48:58.919043Z",
     "shell.execute_reply": "2022-03-28T09:48:58.919491Z",
     "shell.execute_reply.started": "2022-03-28T07:11:01.160750Z"
    },
    "papermill": {
     "duration": 0.088003,
     "end_time": "2022-03-28T09:48:58.919680",
     "exception": false,
     "start_time": "2022-03-28T09:48:58.831677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# adding the date features into test data\n",
    "test['Week'] = test.Week.replace(\"w1\",59)    #  7th week of 2022\n",
    "test['Week'] = test.Week.replace(\"w2\",60)    #  8th week of 2022\n",
    "test['Week'] = test.Week.replace(\"w3\",61)    #  9th week of 2022\n",
    "test['Week'] = test.Week.replace(\"w4\",62)    # 10th week of 2022"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:59.077327Z",
     "iopub.status.busy": "2022-03-28T09:48:59.076334Z",
     "iopub.status.idle": "2022-03-28T09:48:59.184270Z",
     "shell.execute_reply": "2022-03-28T09:48:59.184827Z",
     "shell.execute_reply.started": "2022-03-28T07:11:01.175471Z"
    },
    "papermill": {
     "duration": 0.188666,
     "end_time": "2022-03-28T09:48:59.185021",
     "exception": false,
     "start_time": "2022-03-28T09:48:58.996355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# adding values for the Week of the Month column\n",
    "for idx in test.index:\n",
    "    if test.loc[idx,'Week'] == 59:              # 14th Feb to 20th Feb\n",
    "        test.loc[idx,'WeekOfMonth'] = 3\n",
    "    elif test.loc[idx,'Week'] == 60:            # 21st Feb to 27th Feb\n",
    "        test.loc[idx,'WeekOfMonth'] = 4\n",
    "    elif test.loc[idx,'Week'] == 61:            # 28th Feb to 6th Mar\n",
    "        test.loc[idx,'WeekOfMonth'] = 1             # We will approximate this week as the first week of March\n",
    "    elif test.loc[idx,'Week'] == 62:            # 7th Feb to 13th Mar\n",
    "        test.loc[idx,'WeekOfMonth'] = 2\n",
    "        \n",
    "test.WeekOfMonth = test.WeekOfMonth.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:59.351340Z",
     "iopub.status.busy": "2022-03-28T09:48:59.344893Z",
     "iopub.status.idle": "2022-03-28T09:48:59.359712Z",
     "shell.execute_reply": "2022-03-28T09:48:59.360192Z",
     "shell.execute_reply.started": "2022-03-28T07:11:01.295277Z"
    },
    "papermill": {
     "duration": 0.096603,
     "end_time": "2022-03-28T09:48:59.360386",
     "exception": false,
     "start_time": "2022-03-28T09:48:59.263783",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>Week</th>\n",
       "      <th>PredictedSales</th>\n",
       "      <th>WeekOfMonth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>category_1</td>\n",
       "      <td>43738</td>\n",
       "      <td>62</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1006090</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1076929</td>\n",
       "      <td>62</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>category_1</td>\n",
       "      <td>1081321</td>\n",
       "      <td>61</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>category_2</td>\n",
       "      <td>216151</td>\n",
       "      <td>62</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>372</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1101571</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>373</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1090258</td>\n",
       "      <td>62</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>374</th>\n",
       "      <td>category_2</td>\n",
       "      <td>906595</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>375</th>\n",
       "      <td>category_2</td>\n",
       "      <td>32245</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1006090</td>\n",
       "      <td>60</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>377 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    CategoryCode  ItemCode  Week  PredictedSales  WeekOfMonth\n",
       "0     category_1     43738    62             NaN            2\n",
       "1     category_2   1006090    59             NaN            3\n",
       "2     category_2   1076929    62             NaN            2\n",
       "3     category_1   1081321    61             NaN            1\n",
       "4     category_2    216151    62             NaN            2\n",
       "..           ...       ...   ...             ...          ...\n",
       "372   category_2   1101571    59             NaN            3\n",
       "373   category_2   1090258    62             NaN            2\n",
       "374   category_2    906595    59             NaN            3\n",
       "375   category_2     32245    59             NaN            3\n",
       "376   category_2   1006090    60             NaN            4\n",
       "\n",
       "[377 rows x 5 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.076256,
     "end_time": "2022-03-28T09:48:59.513409",
     "exception": false,
     "start_time": "2022-03-28T09:48:59.437153",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Creating a Dataframe for where Sales data are recorded weekly"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.078497,
     "end_time": "2022-03-28T09:48:59.668909",
     "exception": false,
     "start_time": "2022-03-28T09:48:59.590412",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Since our test data and validation data both use the week as the time frame, let us restructure our dataframe so that instead of units sold on a daily basis (DailySales) , we will use the units sold on a weekly basis (WeeklySales)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:48:59.829288Z",
     "iopub.status.busy": "2022-03-28T09:48:59.828617Z",
     "iopub.status.idle": "2022-03-28T09:48:59.854606Z",
     "shell.execute_reply": "2022-03-28T09:48:59.855241Z",
     "shell.execute_reply.started": "2022-03-28T07:11:01.310764Z"
    },
    "papermill": {
     "duration": 0.109741,
     "end_time": "2022-03-28T09:48:59.855426",
     "exception": false,
     "start_time": "2022-03-28T09:48:59.745685",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Week</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th>WeekOfMonth</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">40</th>\n",
       "      <th>3418</th>\n",
       "      <th>category_1</th>\n",
       "      <th>2</th>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1032550</th>\n",
       "      <th>category_1</th>\n",
       "      <th>2</th>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1032559</th>\n",
       "      <th>category_1</th>\n",
       "      <th>2</th>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1032568</th>\n",
       "      <th>category_1</th>\n",
       "      <th>2</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1032586</th>\n",
       "      <th>category_1</th>\n",
       "      <th>2</th>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">58</th>\n",
       "      <th>211309</th>\n",
       "      <th>category_2</th>\n",
       "      <th>2</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>213802</th>\n",
       "      <th>category_2</th>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216151</th>\n",
       "      <th>category_2</th>\n",
       "      <th>2</th>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145978</th>\n",
       "      <th>category_1</th>\n",
       "      <th>2</th>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1105027</th>\n",
       "      <th>category_2</th>\n",
       "      <th>2</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4099 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        sum\n",
       "Week ItemCode CategoryCode WeekOfMonth     \n",
       "40   3418     category_1   2             42\n",
       "     1032550  category_1   2             16\n",
       "     1032559  category_1   2             17\n",
       "     1032568  category_1   2             10\n",
       "     1032586  category_1   2             21\n",
       "...                                     ...\n",
       "58   211309   category_2   2             14\n",
       "     213802   category_2   2              7\n",
       "     216151   category_2   2             13\n",
       "     145978   category_1   2             32\n",
       "     1105027  category_2   2             14\n",
       "\n",
       "[4099 rows x 1 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Grouping the data rows based on ItemCode and Week and the Category Code\n",
    "\n",
    "train_grouped = train.groupby(['Week', 'ItemCode', 'CategoryCode', 'WeekOfMonth']).DailySales.agg([sum])\n",
    "train_grouped.sort_values(by='Week')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:00.017035Z",
     "iopub.status.busy": "2022-03-28T09:49:00.016320Z",
     "iopub.status.idle": "2022-03-28T09:49:00.024581Z",
     "shell.execute_reply": "2022-03-28T09:49:00.024015Z",
     "shell.execute_reply.started": "2022-03-28T07:11:01.342562Z"
    },
    "papermill": {
     "duration": 0.091301,
     "end_time": "2022-03-28T09:49:00.024723",
     "exception": false,
     "start_time": "2022-03-28T09:48:59.933422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Resetting the index\n",
    "train = train_grouped.reset_index()\n",
    "\n",
    "# renaming the sum column into Weekly Sales\n",
    "\n",
    "train['WeeklySales'] = train['sum']\n",
    "train.drop('sum',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:00.193534Z",
     "iopub.status.busy": "2022-03-28T09:49:00.192783Z",
     "iopub.status.idle": "2022-03-28T09:49:00.196649Z",
     "shell.execute_reply": "2022-03-28T09:49:00.195972Z",
     "shell.execute_reply.started": "2022-03-28T07:11:01.353165Z"
    },
    "papermill": {
     "duration": 0.094435,
     "end_time": "2022-03-28T09:49:00.196807",
     "exception": false,
     "start_time": "2022-03-28T09:49:00.102372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Week</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th>WeekOfMonth</th>\n",
       "      <th>WeeklySales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40</td>\n",
       "      <td>3418</td>\n",
       "      <td>category_1</td>\n",
       "      <td>2</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>40</td>\n",
       "      <td>3427</td>\n",
       "      <td>category_1</td>\n",
       "      <td>2</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>40</td>\n",
       "      <td>7666</td>\n",
       "      <td>category_3</td>\n",
       "      <td>2</td>\n",
       "      <td>119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>40</td>\n",
       "      <td>9925</td>\n",
       "      <td>category_2</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>40</td>\n",
       "      <td>16936</td>\n",
       "      <td>category_3</td>\n",
       "      <td>2</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Week  ItemCode CategoryCode  WeekOfMonth  WeeklySales\n",
       "0    40      3418   category_1            2           42\n",
       "1    40      3427   category_1            2           40\n",
       "2    40      7666   category_3            2          119\n",
       "3    40      9925   category_2            2            9\n",
       "4    40     16936   category_3            2           25"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.077645,
     "end_time": "2022-03-28T09:49:00.354028",
     "exception": false,
     "start_time": "2022-03-28T09:49:00.276383",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Visualizations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:00.516574Z",
     "iopub.status.busy": "2022-03-28T09:49:00.515819Z",
     "iopub.status.idle": "2022-03-28T09:49:01.636397Z",
     "shell.execute_reply": "2022-03-28T09:49:01.635746Z",
     "shell.execute_reply.started": "2022-03-28T07:11:01.369431Z"
    },
    "papermill": {
     "duration": 1.20461,
     "end_time": "2022-03-28T09:49:01.636552",
     "exception": false,
     "start_time": "2022-03-28T09:49:00.431942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## importing libraries for data visualizations\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.081476,
     "end_time": "2022-03-28T09:49:01.801504",
     "exception": false,
     "start_time": "2022-03-28T09:49:01.720028",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### No of Unique Item Codes per Category Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:01.970849Z",
     "iopub.status.busy": "2022-03-28T09:49:01.970162Z",
     "iopub.status.idle": "2022-03-28T09:49:02.179775Z",
     "shell.execute_reply": "2022-03-28T09:49:02.180376Z",
     "shell.execute_reply.started": "2022-03-28T07:11:01.378382Z"
    },
    "papermill": {
     "duration": 0.298516,
     "end_time": "2022-03-28T09:49:02.180602",
     "exception": false,
     "start_time": "2022-03-28T09:49:01.882086",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Number of Unique Items per Category')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Grouping the data rows based on Categories with unique ItemCodes\n",
    "df1 = pd.DataFrame()\n",
    "df1['UniqueProduct'] = train.groupby('CategoryCode').ItemCode.value_counts()\n",
    "df1 = df1.reset_index()\n",
    "\n",
    "## Visualizing the bar chart\n",
    "sns.histplot(data=df1, x=\"CategoryCode\")\n",
    "plt.ylabel('No of unique Item Codes')\n",
    "plt.title('Number of Unique Items per Category')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.080292,
     "end_time": "2022-03-28T09:49:02.344651",
     "exception": false,
     "start_time": "2022-03-28T09:49:02.264359",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The chart indicates that there are larger variety in products in the 2nd Category."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.080214,
     "end_time": "2022-03-28T09:49:02.504604",
     "exception": false,
     "start_time": "2022-03-28T09:49:02.424390",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Total Units sold in each Category "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:02.675303Z",
     "iopub.status.busy": "2022-03-28T09:49:02.674534Z",
     "iopub.status.idle": "2022-03-28T09:49:02.890250Z",
     "shell.execute_reply": "2022-03-28T09:49:02.890803Z",
     "shell.execute_reply.started": "2022-03-28T07:11:01.590694Z"
    },
    "papermill": {
     "duration": 0.30671,
     "end_time": "2022-03-28T09:49:02.890983",
     "exception": false,
     "start_time": "2022-03-28T09:49:02.584273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Total Units Sold from each Category')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Grouping the data rows based on Categories with WeeklySales\n",
    "df2 = train.groupby(['CategoryCode']).WeeklySales.agg([sum])\n",
    "df2.sort_values(by='CategoryCode')\n",
    "df2 = df2.reset_index()\n",
    "df2['WeeklySales'] = df2['sum']\n",
    "df2.drop('sum',axis=1,inplace=True)\n",
    "\n",
    "## Visualizing the bar chart\n",
    "sns.barplot(x= 'CategoryCode' , y = 'WeeklySales' , data = df2)\n",
    "plt.title('Total Units Sold from each Category')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.084254,
     "end_time": "2022-03-28T09:49:03.060961",
     "exception": false,
     "start_time": "2022-03-28T09:49:02.976707",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Most of units that were sold belonged to the 1st Category. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.105089,
     "end_time": "2022-03-28T09:49:03.279852",
     "exception": false,
     "start_time": "2022-03-28T09:49:03.174763",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Total Units Sold on each Week of the Month"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.106728,
     "end_time": "2022-03-28T09:49:03.473591",
     "exception": false,
     "start_time": "2022-03-28T09:49:03.366863",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "That is, Trends in Sales in first, second ... weeks of a month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:03.650234Z",
     "iopub.status.busy": "2022-03-28T09:49:03.649569Z",
     "iopub.status.idle": "2022-03-28T09:49:03.884282Z",
     "shell.execute_reply": "2022-03-28T09:49:03.883649Z",
     "shell.execute_reply.started": "2022-03-28T07:11:01.796133Z"
    },
    "papermill": {
     "duration": 0.319742,
     "end_time": "2022-03-28T09:49:03.884444",
     "exception": false,
     "start_time": "2022-03-28T09:49:03.564702",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Total Units Sold on each Week of the Month')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Grouping the data rows based on the Week of the Month with WeeklySales\n",
    "df3 = train.groupby(['WeekOfMonth']).WeeklySales.agg([sum])\n",
    "df3.sort_values(by='WeekOfMonth')\n",
    "df3 = df3.reset_index()\n",
    "df3['WeeklySales'] = df3['sum']\n",
    "df3.drop('sum',axis=1,inplace=True)\n",
    "\n",
    "## Visualizing the bar chart\n",
    "sns.barplot(x= 'WeekOfMonth' , y = 'WeeklySales' , data = df3)\n",
    "plt.title('Total Units Sold on each Week of the Month')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.090663,
     "end_time": "2022-03-28T09:49:04.059219",
     "exception": false,
     "start_time": "2022-03-28T09:49:03.968556",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The above chart indicates that more units were sold during the start of the month especially in the 2nd week of the month. Since the 6th week occurs very rarely it doesn't contain much sales quantitites."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.084564,
     "end_time": "2022-03-28T09:49:04.227640",
     "exception": false,
     "start_time": "2022-03-28T09:49:04.143076",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Trend of Units sold per week"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:04.403011Z",
     "iopub.status.busy": "2022-03-28T09:49:04.402303Z",
     "iopub.status.idle": "2022-03-28T09:49:04.641063Z",
     "shell.execute_reply": "2022-03-28T09:49:04.640470Z",
     "shell.execute_reply.started": "2022-03-28T07:11:02.038946Z"
    },
    "papermill": {
     "duration": 0.330471,
     "end_time": "2022-03-28T09:49:04.641226",
     "exception": false,
     "start_time": "2022-03-28T09:49:04.310755",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Weekly Variation of Total Units Sold')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Grouping the data rows based on Week with WeeklySales\n",
    "df4 = train.groupby(['Week']).WeeklySales.agg([sum])\n",
    "df4.sort_values(by='Week')\n",
    "df4 = df4.reset_index()\n",
    "df4['WeeklySales'] = df4['sum']\n",
    "df4.drop('sum',axis=1,inplace=True)\n",
    "\n",
    "## Visualizing the bar chart\n",
    "sns.lineplot(x='Week' , y = 'WeeklySales' , data = df4)\n",
    "plt.title('Weekly Variation of Total Units Sold')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.084731,
     "end_time": "2022-03-28T09:49:04.813305",
     "exception": false,
     "start_time": "2022-03-28T09:49:04.728574",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Analysis of the number of units sold from Items belonging to Category 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:04.991528Z",
     "iopub.status.busy": "2022-03-28T09:49:04.990564Z",
     "iopub.status.idle": "2022-03-28T09:49:05.264705Z",
     "shell.execute_reply": "2022-03-28T09:49:05.265252Z",
     "shell.execute_reply.started": "2022-03-28T07:11:02.282582Z"
    },
    "papermill": {
     "duration": 0.367581,
     "end_time": "2022-03-28T09:49:05.265457",
     "exception": false,
     "start_time": "2022-03-28T09:49:04.897876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'No of Units Sold in Category 1 per week')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Extracting the data related to Category 1\n",
    "cat1 = train.loc[train.CategoryCode == 'category_1']\n",
    "\n",
    "cat1 = cat1.groupby(['Week']).WeeklySales.agg([sum])\n",
    "cat1.sort_values(by='Week')\n",
    "cat1 = cat1.reset_index()\n",
    "cat1['WeeklySales'] = cat1['sum']\n",
    "cat1.drop('sum',axis=1,inplace=True)\n",
    "\n",
    "## Visualizing the bar chart\n",
    "sns.lineplot(x='Week' , y = 'WeeklySales' , data = cat1)\n",
    "plt.title('No of Units Sold in Category 1 per week')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.08629,
     "end_time": "2022-03-28T09:49:05.446666",
     "exception": false,
     "start_time": "2022-03-28T09:49:05.360376",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Analysis of the number of units sold from Items belonging to Category 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:05.626861Z",
     "iopub.status.busy": "2022-03-28T09:49:05.621792Z",
     "iopub.status.idle": "2022-03-28T09:49:05.866373Z",
     "shell.execute_reply": "2022-03-28T09:49:05.865697Z",
     "shell.execute_reply.started": "2022-03-28T07:11:02.530134Z"
    },
    "papermill": {
     "duration": 0.332814,
     "end_time": "2022-03-28T09:49:05.866555",
     "exception": false,
     "start_time": "2022-03-28T09:49:05.533741",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'No of Units Sold in Category 2 per week')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Extracting the data related to Category 2\n",
    "cat2 = train.loc[train.CategoryCode == 'category_2']\n",
    "\n",
    "cat2 = cat2.groupby(['Week']).WeeklySales.agg([sum])\n",
    "cat2.sort_values(by='Week')\n",
    "cat2 = cat2.reset_index()\n",
    "cat2['WeeklySales'] = cat2['sum']\n",
    "cat2.drop('sum',axis=1,inplace=True)\n",
    "\n",
    "## Visualizing the bar chart\n",
    "sns.lineplot(x='Week' , y = 'WeeklySales' , data = cat2)\n",
    "plt.title('No of Units Sold in Category 2 per week')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.089432,
     "end_time": "2022-03-28T09:49:06.043446",
     "exception": false,
     "start_time": "2022-03-28T09:49:05.954014",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Analysis of the number of units sold from Items belonging to Category 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:06.232282Z",
     "iopub.status.busy": "2022-03-28T09:49:06.231607Z",
     "iopub.status.idle": "2022-03-28T09:49:06.481652Z",
     "shell.execute_reply": "2022-03-28T09:49:06.482177Z",
     "shell.execute_reply.started": "2022-03-28T07:11:02.774898Z"
    },
    "papermill": {
     "duration": 0.349727,
     "end_time": "2022-03-28T09:49:06.482356",
     "exception": false,
     "start_time": "2022-03-28T09:49:06.132629",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'No of Units Sold in Category 3 per week')"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Extracting the data related to Category 3\n",
    "cat3 = train.loc[train.CategoryCode == 'category_3']\n",
    "\n",
    "cat3 = cat3.groupby(['Week']).WeeklySales.agg([sum])\n",
    "cat3.sort_values(by='Week')\n",
    "cat3 = cat3.reset_index()\n",
    "cat3['WeeklySales'] = cat3['sum']\n",
    "cat3.drop('sum',axis=1,inplace=True)\n",
    "\n",
    "## Visualizing the bar chart\n",
    "sns.lineplot(x='Week' , y = 'WeeklySales' , data = cat3)\n",
    "plt.title('No of Units Sold in Category 3 per week')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.088066,
     "end_time": "2022-03-28T09:49:06.660975",
     "exception": false,
     "start_time": "2022-03-28T09:49:06.572909",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Analysis of the number of units sold from Items belonging to Category 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:06.849237Z",
     "iopub.status.busy": "2022-03-28T09:49:06.848527Z",
     "iopub.status.idle": "2022-03-28T09:49:07.096227Z",
     "shell.execute_reply": "2022-03-28T09:49:07.095547Z",
     "shell.execute_reply.started": "2022-03-28T07:11:03.023562Z"
    },
    "papermill": {
     "duration": 0.345041,
     "end_time": "2022-03-28T09:49:07.096382",
     "exception": false,
     "start_time": "2022-03-28T09:49:06.751341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'No of Units Sold in Category 4 per week')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Extracting the data related to Category 4\n",
    "cat4 = train.loc[train.CategoryCode == 'category_4']\n",
    "\n",
    "cat4 = cat4.groupby(['Week']).WeeklySales.agg([sum])\n",
    "cat4.sort_values(by='Week')\n",
    "cat4 = cat4.reset_index()\n",
    "cat4['WeeklySales'] = cat4['sum']\n",
    "cat4.drop('sum',axis=1,inplace=True)\n",
    "\n",
    "## Visualizing the bar chart\n",
    "sns.lineplot(x='Week' , y = 'WeeklySales' , data = cat4)\n",
    "plt.title('No of Units Sold in Category 4 per week')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.091683,
     "end_time": "2022-03-28T09:49:07.280860",
     "exception": false,
     "start_time": "2022-03-28T09:49:07.189177",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Analysis & Trends of the number of units sold from Items for each Category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:07.504062Z",
     "iopub.status.busy": "2022-03-28T09:49:07.491325Z",
     "iopub.status.idle": "2022-03-28T09:49:08.283456Z",
     "shell.execute_reply": "2022-03-28T09:49:08.283929Z",
     "shell.execute_reply.started": "2022-03-28T07:11:03.234169Z"
    },
    "papermill": {
     "duration": 0.91276,
     "end_time": "2022-03-28T09:49:08.284129",
     "exception": false,
     "start_time": "2022-03-28T09:49:07.371369",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Regression Plots of Weekly Sales from each Category')"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,8))\n",
    "\n",
    "# Combining all 4 categorices of items for comparisions\n",
    "sns.regplot(x='Week' , y = 'WeeklySales' , data = cat1 , label = 'Category 1')\n",
    "sns.regplot(x='Week' , y = 'WeeklySales' , data = cat2 , label = 'Category 2')\n",
    "sns.regplot(x='Week' , y = 'WeeklySales' , data = cat3 , label = 'Category 3')\n",
    "sns.regplot(x='Week' , y = 'WeeklySales' , data = cat4 , label = 'Category 4')\n",
    "plt.legend()\n",
    "plt.title('Regression Plots of Weekly Sales from each Category')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.094436,
     "end_time": "2022-03-28T09:49:08.472294",
     "exception": false,
     "start_time": "2022-03-28T09:49:08.377858",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "According to the above line plots and the regression plot, quantity of units being sold in Category 1 have been gradually increasing over time. Whereas in the other categories, sale quantities have remained stagnant to slight decreases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.092129,
     "end_time": "2022-03-28T09:49:08.658656",
     "exception": false,
     "start_time": "2022-03-28T09:49:08.566527",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### One hot encoding to add dummy variables for the Category Codes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:08.858903Z",
     "iopub.status.busy": "2022-03-28T09:49:08.856344Z",
     "iopub.status.idle": "2022-03-28T09:49:08.863891Z",
     "shell.execute_reply": "2022-03-28T09:49:08.863322Z",
     "shell.execute_reply.started": "2022-03-28T07:11:03.966944Z"
    },
    "papermill": {
     "duration": 0.111134,
     "end_time": "2022-03-28T09:49:08.864091",
     "exception": false,
     "start_time": "2022-03-28T09:49:08.752957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Using one-hot encoding to get dummy variables for the category the item belongs to\n",
    "# we can drop one of the columns from these dummy varibles. We will drop the first column\n",
    "\n",
    "categories_train = pd.get_dummies(train.CategoryCode, drop_first = True)\n",
    "categories_vali = pd.get_dummies(vali.CategoryCode, drop_first = True)\n",
    "categories_test = pd.get_dummies(test.CategoryCode, drop_first = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:09.061418Z",
     "iopub.status.busy": "2022-03-28T09:49:09.060692Z",
     "iopub.status.idle": "2022-03-28T09:49:09.069196Z",
     "shell.execute_reply": "2022-03-28T09:49:09.068623Z",
     "shell.execute_reply.started": "2022-03-28T07:11:03.977552Z"
    },
    "papermill": {
     "duration": 0.108273,
     "end_time": "2022-03-28T09:49:09.069353",
     "exception": false,
     "start_time": "2022-03-28T09:49:08.961080",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Adding the dummy variables for Item Categories\n",
    "train = pd.concat([train, categories_train], axis=1)\n",
    "vali = pd.concat([vali, categories_vali], axis=1)\n",
    "test = pd.concat([test, categories_test], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:09.267028Z",
     "iopub.status.busy": "2022-03-28T09:49:09.263143Z",
     "iopub.status.idle": "2022-03-28T09:49:09.269913Z",
     "shell.execute_reply": "2022-03-28T09:49:09.269391Z",
     "shell.execute_reply.started": "2022-03-28T07:11:03.988451Z"
    },
    "papermill": {
     "duration": 0.105765,
     "end_time": "2022-03-28T09:49:09.270092",
     "exception": false,
     "start_time": "2022-03-28T09:49:09.164327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Removing the original column for Category Codes\n",
    "train.drop('CategoryCode', axis=1, inplace = True)\n",
    "vali.drop('CategoryCode', axis=1, inplace = True)\n",
    "test.drop('CategoryCode', axis=1, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.096348,
     "end_time": "2022-03-28T09:49:09.459201",
     "exception": false,
     "start_time": "2022-03-28T09:49:09.362853",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Correlations with Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:09.656639Z",
     "iopub.status.busy": "2022-03-28T09:49:09.655866Z",
     "iopub.status.idle": "2022-03-28T09:49:10.354061Z",
     "shell.execute_reply": "2022-03-28T09:49:10.354589Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.001893Z"
    },
    "papermill": {
     "duration": 0.796514,
     "end_time": "2022-03-28T09:49:10.354772",
     "exception": false,
     "start_time": "2022-03-28T09:49:09.558258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## correlation of all features with each other\n",
    "import seaborn as sns\n",
    "sns.heatmap(train.corr(), annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.095167,
     "end_time": "2022-03-28T09:49:10.546700",
     "exception": false,
     "start_time": "2022-03-28T09:49:10.451533",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Modelling the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.09425,
     "end_time": "2022-03-28T09:49:10.735656",
     "exception": false,
     "start_time": "2022-03-28T09:49:10.641406",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Selecting the features and Target variables from training set and validation set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:10.936913Z",
     "iopub.status.busy": "2022-03-28T09:49:10.936075Z",
     "iopub.status.idle": "2022-03-28T09:49:10.939229Z",
     "shell.execute_reply": "2022-03-28T09:49:10.938658Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.563589Z"
    },
    "papermill": {
     "duration": 0.107285,
     "end_time": "2022-03-28T09:49:10.939381",
     "exception": false,
     "start_time": "2022-03-28T09:49:10.832096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Training Set split\n",
    "Train_Y = train['WeeklySales']\n",
    "Train_X = train[['Week','ItemCode','WeekOfMonth','category_2','category_3','category_4']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:11.138740Z",
     "iopub.status.busy": "2022-03-28T09:49:11.137736Z",
     "iopub.status.idle": "2022-03-28T09:49:11.139475Z",
     "shell.execute_reply": "2022-03-28T09:49:11.139944Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.570918Z"
    },
    "papermill": {
     "duration": 0.103652,
     "end_time": "2022-03-28T09:49:11.140154",
     "exception": false,
     "start_time": "2022-03-28T09:49:11.036502",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Validation Set split\n",
    "Vali_Y = vali['WeeklySales']\n",
    "Vali_X = vali[['Week','ItemCode','WeekOfMonth','category_2','category_3','category_4']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.096032,
     "end_time": "2022-03-28T09:49:11.339679",
     "exception": false,
     "start_time": "2022-03-28T09:49:11.243647",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Decision Tree Modelling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:11.532266Z",
     "iopub.status.busy": "2022-03-28T09:49:11.531596Z",
     "iopub.status.idle": "2022-03-28T09:49:11.898388Z",
     "shell.execute_reply": "2022-03-28T09:49:11.897805Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.580737Z"
    },
    "papermill": {
     "duration": 0.464002,
     "end_time": "2022-03-28T09:49:11.898543",
     "exception": false,
     "start_time": "2022-03-28T09:49:11.434541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## importing Decision Tree Regressor\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n",
    "## Importing the library to evaluate model performance - MAPE\n",
    "from sklearn.metrics import mean_absolute_percentage_error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-27T05:27:40.006059Z",
     "iopub.status.busy": "2022-03-27T05:27:40.005725Z",
     "iopub.status.idle": "2022-03-27T05:27:40.04167Z",
     "shell.execute_reply": "2022-03-27T05:27:40.041107Z",
     "shell.execute_reply.started": "2022-03-27T05:27:40.005998Z"
    },
    "papermill": {
     "duration": 0.095244,
     "end_time": "2022-03-28T09:49:12.090574",
     "exception": false,
     "start_time": "2022-03-28T09:49:11.995330",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We will use an utility function to find the best Decision Tree with the most suitable number of leaf nodes which outputs the lowest error (lowest Mean Absolute Percentage Error)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:12.291823Z",
     "iopub.status.busy": "2022-03-28T09:49:12.291160Z",
     "iopub.status.idle": "2022-03-28T09:49:12.292779Z",
     "shell.execute_reply": "2022-03-28T09:49:12.293230Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.590825Z"
    },
    "papermill": {
     "duration": 0.106401,
     "end_time": "2022-03-28T09:49:12.293416",
     "exception": false,
     "start_time": "2022-03-28T09:49:12.187015",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## possible leaf node values to experiment\n",
    "candidate_leaf_nodes = [25,50,75,100,125,150,175,200,225,250,275,300,325,350]\n",
    "\n",
    "# utility function\n",
    "def get_mape(leaf_nodes, Train_X, Vali_X, Train_Y, Vali_Y):\n",
    "    T_Model = DecisionTreeRegressor(max_leaf_nodes = leaf_nodes, random_state=0)\n",
    "    \n",
    "    # applying the model and obatining our prediction\n",
    "    T_Model.fit(Train_X, Train_Y)\n",
    "    T_Pred_Y = T_Model.predict(Vali_X)\n",
    "    \n",
    "    # using mape to compare each model dependent on the leaf nodes\n",
    "    mape = mean_absolute_percentage_error(Vali_Y, T_Pred_Y).round(5)\n",
    "    print(leaf_nodes , mape)\n",
    "    return mape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:12.486078Z",
     "iopub.status.busy": "2022-03-28T09:49:12.485432Z",
     "iopub.status.idle": "2022-03-28T09:49:12.618980Z",
     "shell.execute_reply": "2022-03-28T09:49:12.619506Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.600857Z"
    },
    "papermill": {
     "duration": 0.231304,
     "end_time": "2022-03-28T09:49:12.619693",
     "exception": false,
     "start_time": "2022-03-28T09:49:12.388389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25 1.0839\n",
      "50 0.99009\n",
      "75 0.86828\n",
      "100 0.82206\n",
      "125 0.7852\n",
      "150 0.76618\n",
      "175 0.76869\n",
      "200 0.76225\n",
      "225 0.75706\n",
      "250 0.73454\n",
      "275 0.72968\n",
      "300 0.72706\n",
      "325 0.75736\n",
      "350 0.75173\n",
      "\n",
      "Best Tree Size is 300\n"
     ]
    }
   ],
   "source": [
    "## a list of scores of mape and finding the lowest and mapping to the relevant leaf size\n",
    "scores = {leaf_size : get_mape(leaf_size, Train_X, Vali_X, Train_Y, Vali_Y) for leaf_size in candidate_leaf_nodes}\n",
    "\n",
    "## obtaining the best tree size for the Decision Tree using the above list\n",
    "best_tree_size = min(scores, key=scores.get)\n",
    "print('')\n",
    "print('Best Tree Size is ' + str(best_tree_size))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.096253,
     "end_time": "2022-03-28T09:49:12.811353",
     "exception": false,
     "start_time": "2022-03-28T09:49:12.715100",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Using the results of the above analysis we can now define the Decision Tree Model for our data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:13.009593Z",
     "iopub.status.busy": "2022-03-28T09:49:13.008905Z",
     "iopub.status.idle": "2022-03-28T09:49:13.013234Z",
     "shell.execute_reply": "2022-03-28T09:49:13.012644Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.730351Z"
    },
    "papermill": {
     "duration": 0.103924,
     "end_time": "2022-03-28T09:49:13.013378",
     "exception": false,
     "start_time": "2022-03-28T09:49:12.909454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## defining the Decision Tree Model\n",
    "TreeModel = DecisionTreeRegressor(max_leaf_nodes = best_tree_size, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:13.218518Z",
     "iopub.status.busy": "2022-03-28T09:49:13.217688Z",
     "iopub.status.idle": "2022-03-28T09:49:13.229459Z",
     "shell.execute_reply": "2022-03-28T09:49:13.230252Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.736604Z"
    },
    "papermill": {
     "duration": 0.119734,
     "end_time": "2022-03-28T09:49:13.230475",
     "exception": false,
     "start_time": "2022-03-28T09:49:13.110741",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(max_leaf_nodes=300, random_state=0)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## fitting the data to the model\n",
    "TreeModel.fit(Train_X , Train_Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:13.436251Z",
     "iopub.status.busy": "2022-03-28T09:49:13.435397Z",
     "iopub.status.idle": "2022-03-28T09:49:13.442493Z",
     "shell.execute_reply": "2022-03-28T09:49:13.443149Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.756473Z"
    },
    "papermill": {
     "duration": 0.111127,
     "end_time": "2022-03-28T09:49:13.443348",
     "exception": false,
     "start_time": "2022-03-28T09:49:13.332221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Deriving the predictions for the input features of the Validation dataset\n",
    "Pred_Vali = TreeModel.predict(Vali_X).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:13.654188Z",
     "iopub.status.busy": "2022-03-28T09:49:13.653410Z",
     "iopub.status.idle": "2022-03-28T09:49:13.658723Z",
     "shell.execute_reply": "2022-03-28T09:49:13.659279Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.762979Z"
    },
    "papermill": {
     "duration": 0.107672,
     "end_time": "2022-03-28T09:49:13.659452",
     "exception": false,
     "start_time": "2022-03-28T09:49:13.551780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7137630981540313"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Applying the MAPE to the actual target data and predicted target data\n",
    "mean_absolute_percentage_error(Vali_Y, Pred_Vali)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.098435,
     "end_time": "2022-03-28T09:49:13.855618",
     "exception": false,
     "start_time": "2022-03-28T09:49:13.757183",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The new model has achieved a better performace with the addition of our new variable (Week of the Month) when applied to the validation data. Previously without the new variable, the MAPE score was given as 0.7709228"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.099949,
     "end_time": "2022-03-28T09:49:14.056838",
     "exception": false,
     "start_time": "2022-03-28T09:49:13.956889",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Applying the Model to the Test Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:14.254456Z",
     "iopub.status.busy": "2022-03-28T09:49:14.253682Z",
     "iopub.status.idle": "2022-03-28T09:49:14.259516Z",
     "shell.execute_reply": "2022-03-28T09:49:14.258879Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.779959Z"
    },
    "papermill": {
     "duration": 0.106064,
     "end_time": "2022-03-28T09:49:14.259681",
     "exception": false,
     "start_time": "2022-03-28T09:49:14.153617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Obtaining the test dataset for forecasting\n",
    "test = test[['Week','ItemCode','WeekOfMonth','category_2','category_3','category_4']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:14.457255Z",
     "iopub.status.busy": "2022-03-28T09:49:14.456536Z",
     "iopub.status.idle": "2022-03-28T09:49:14.462263Z",
     "shell.execute_reply": "2022-03-28T09:49:14.462849Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.788763Z"
    },
    "papermill": {
     "duration": 0.10684,
     "end_time": "2022-03-28T09:49:14.463042",
     "exception": false,
     "start_time": "2022-03-28T09:49:14.356202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Applying the model to the test dataset and obtaining the data as integers\n",
    "Pred_Test = TreeModel.predict(test).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:14.664353Z",
     "iopub.status.busy": "2022-03-28T09:49:14.663596Z",
     "iopub.status.idle": "2022-03-28T09:49:14.667717Z",
     "shell.execute_reply": "2022-03-28T09:49:14.668441Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.799637Z"
    },
    "papermill": {
     "duration": 0.107778,
     "end_time": "2022-03-28T09:49:14.668629",
     "exception": false,
     "start_time": "2022-03-28T09:49:14.560851",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission_file = pd.DataFrame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:14.873364Z",
     "iopub.status.busy": "2022-03-28T09:49:14.872583Z",
     "iopub.status.idle": "2022-03-28T09:49:14.875674Z",
     "shell.execute_reply": "2022-03-28T09:49:14.875154Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.806956Z"
    },
    "papermill": {
     "duration": 0.110568,
     "end_time": "2022-03-28T09:49:14.875835",
     "exception": false,
     "start_time": "2022-03-28T09:49:14.765267",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## creating submission dataset\n",
    "submission_file['ID'] = test_file['CategoryCode'].astype(str)+'_'+test_file['ItemCode'].astype(str)+'_'+test_file['Week']\n",
    "submission_file['WeeklySales'] = Pred_Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:15.082465Z",
     "iopub.status.busy": "2022-03-28T09:49:15.081640Z",
     "iopub.status.idle": "2022-03-28T09:49:15.089264Z",
     "shell.execute_reply": "2022-03-28T09:49:15.089786Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.820346Z"
    },
    "papermill": {
     "duration": 0.115158,
     "end_time": "2022-03-28T09:49:15.089968",
     "exception": false,
     "start_time": "2022-03-28T09:49:14.974810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>WeeklySales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>category_1_43738_w4</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>category_2_1006090_w1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>category_2_1076929_w4</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>category_1_1081321_w3</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>category_2_216151_w4</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>372</th>\n",
       "      <td>category_2_1101571_w1</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>373</th>\n",
       "      <td>category_2_1090258_w4</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>374</th>\n",
       "      <td>category_2_906595_w1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>375</th>\n",
       "      <td>category_2_32245_w1</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376</th>\n",
       "      <td>category_2_1006090_w2</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>377 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                        ID  WeeklySales\n",
       "0      category_1_43738_w4           11\n",
       "1    category_2_1006090_w1           10\n",
       "2    category_2_1076929_w4           12\n",
       "3    category_1_1081321_w3           12\n",
       "4     category_2_216151_w4           11\n",
       "..                     ...          ...\n",
       "372  category_2_1101571_w1           12\n",
       "373  category_2_1090258_w4           12\n",
       "374   category_2_906595_w1           10\n",
       "375    category_2_32245_w1           51\n",
       "376  category_2_1006090_w2           10\n",
       "\n",
       "[377 rows x 2 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission_file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T09:49:15.295585Z",
     "iopub.status.busy": "2022-03-28T09:49:15.294455Z",
     "iopub.status.idle": "2022-03-28T09:49:15.300828Z",
     "shell.execute_reply": "2022-03-28T09:49:15.301433Z",
     "shell.execute_reply.started": "2022-03-28T07:11:04.834176Z"
    },
    "papermill": {
     "duration": 0.110775,
     "end_time": "2022-03-28T09:49:15.301619",
     "exception": false,
     "start_time": "2022-03-28T09:49:15.190844",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Obtaining the solutions as a CSV file\n",
    "submission_file.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 43.28006,
   "end_time": "2022-03-28T09:49:16.211528",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-03-28T09:48:32.931468",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
