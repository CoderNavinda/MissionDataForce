{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:38.785990Z",
     "iopub.status.busy": "2022-03-28T08:55:38.785080Z",
     "iopub.status.idle": "2022-03-28T08:55:38.805761Z",
     "shell.execute_reply": "2022-03-28T08:55:38.806278Z",
     "shell.execute_reply.started": "2022-03-28T08:53:53.990903Z"
    },
    "papermill": {
     "duration": 0.092251,
     "end_time": "2022-03-28T08:55:38.806527",
     "exception": false,
     "start_time": "2022-03-28T08:55:38.714276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/data-storm-30/validation_data.csv\n",
      "/kaggle/input/data-storm-30/train_data.csv\n",
      "/kaggle/input/data-storm-30/test_data.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "        \n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:38.945200Z",
     "iopub.status.busy": "2022-03-28T08:55:38.944661Z",
     "iopub.status.idle": "2022-03-28T08:55:38.947863Z",
     "shell.execute_reply": "2022-03-28T08:55:38.948301Z",
     "shell.execute_reply.started": "2022-03-28T08:53:54.194997Z"
    },
    "papermill": {
     "duration": 0.073502,
     "end_time": "2022-03-28T08:55:38.948425",
     "exception": false,
     "start_time": "2022-03-28T08:55:38.874923",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## we import library 'warnings' to handle any warnings that may surface\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.066457,
     "end_time": "2022-03-28T08:55:39.082492",
     "exception": false,
     "start_time": "2022-03-28T08:55:39.016035",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Preprocessing of Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.066355,
     "end_time": "2022-03-28T08:55:39.215251",
     "exception": false,
     "start_time": "2022-03-28T08:55:39.148896",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Extracting the data into dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:39.351874Z",
     "iopub.status.busy": "2022-03-28T08:55:39.351321Z",
     "iopub.status.idle": "2022-03-28T08:55:39.433602Z",
     "shell.execute_reply": "2022-03-28T08:55:39.433080Z",
     "shell.execute_reply.started": "2022-03-28T08:53:54.379642Z"
    },
    "papermill": {
     "duration": 0.151573,
     "end_time": "2022-03-28T08:55:39.433733",
     "exception": false,
     "start_time": "2022-03-28T08:55:39.282160",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Obtaining the file paths for the input data for analysis\n",
    "train_filepath = \"/kaggle/input/data-storm-30/train_data.csv\"\n",
    "vali_filepath = \"/kaggle/input/data-storm-30/validation_data.csv\"\n",
    "test_filepath = \"/kaggle/input/data-storm-30/test_data.csv\"\n",
    "\n",
    "# Extracting the input files into dataframes\n",
    "train_file = pd.read_csv(train_filepath)\n",
    "vali_file = pd.read_csv(vali_filepath)\n",
    "test_file  = pd.read_csv(test_filepath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:39.573165Z",
     "iopub.status.busy": "2022-03-28T08:55:39.572585Z",
     "iopub.status.idle": "2022-03-28T08:55:39.588246Z",
     "shell.execute_reply": "2022-03-28T08:55:39.588663Z",
     "shell.execute_reply.started": "2022-03-28T08:53:54.554956Z"
    },
    "papermill": {
     "duration": 0.08676,
     "end_time": "2022-03-28T08:55:39.588806",
     "exception": false,
     "start_time": "2022-03-28T08:55:39.502046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>DateID</th>\n",
       "      <th>DailySales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>category_2</td>\n",
       "      <td>117610</td>\n",
       "      <td>11/6/2021</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>category_4</td>\n",
       "      <td>836584</td>\n",
       "      <td>11/18/2021</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>category_1</td>\n",
       "      <td>370195</td>\n",
       "      <td>1/24/2022</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>category_2</td>\n",
       "      <td>172582</td>\n",
       "      <td>10/30/2021</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1006009</td>\n",
       "      <td>10/30/2021</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  CategoryCode  ItemCode      DateID  DailySales\n",
       "0   category_2    117610   11/6/2021           7\n",
       "1   category_4    836584  11/18/2021          16\n",
       "2   category_1    370195   1/24/2022           6\n",
       "3   category_2    172582  10/30/2021           5\n",
       "4   category_2   1006009  10/30/2021           5"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# display top rows of training and validation data\n",
    "train_file.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:39.742933Z",
     "iopub.status.busy": "2022-03-28T08:55:39.742258Z",
     "iopub.status.idle": "2022-03-28T08:55:39.744959Z",
     "shell.execute_reply": "2022-03-28T08:55:39.745499Z",
     "shell.execute_reply.started": "2022-03-28T08:53:54.785351Z"
    },
    "papermill": {
     "duration": 0.088591,
     "end_time": "2022-03-28T08:55:39.745669",
     "exception": false,
     "start_time": "2022-03-28T08:55:39.657078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>Week</th>\n",
       "      <th>WeeklySales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1044502</td>\n",
       "      <td>w1</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1105009</td>\n",
       "      <td>w1</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>category_2</td>\n",
       "      <td>913561</td>\n",
       "      <td>w4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>category_1</td>\n",
       "      <td>1048975</td>\n",
       "      <td>w4</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>category_1</td>\n",
       "      <td>17287</td>\n",
       "      <td>w2</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  CategoryCode  ItemCode Week  WeeklySales\n",
       "0   category_2   1044502   w1           11\n",
       "1   category_2   1105009   w1           11\n",
       "2   category_2    913561   w4            5\n",
       "3   category_1   1048975   w4           30\n",
       "4   category_1     17287   w2           60"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vali_file.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:39.971795Z",
     "iopub.status.busy": "2022-03-28T08:55:39.970964Z",
     "iopub.status.idle": "2022-03-28T08:55:39.981194Z",
     "shell.execute_reply": "2022-03-28T08:55:39.981819Z",
     "shell.execute_reply.started": "2022-03-28T08:53:55.010045Z"
    },
    "papermill": {
     "duration": 0.129607,
     "end_time": "2022-03-28T08:55:39.981996",
     "exception": false,
     "start_time": "2022-03-28T08:55:39.852389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "# checking the number of rows with missing values in each of the dataframes\n",
    "\n",
    "# training set\n",
    "print(pd.isnull(train_file.CategoryCode).sum())    # Checking null values in CategoryCode \n",
    "print(pd.isnull(train_file.ItemCode).sum())        # Checking null values in ItemCode \n",
    "print(pd.isnull(train_file.DateID).sum())          # Checking null values in DateID \n",
    "print(pd.isnull(train_file.DailySales).sum())      # Checking null values in DailySales\n",
    "\n",
    "# validation set\n",
    "print(pd.isnull(vali_file.CategoryCode).sum())     # Checking null values in CategoryCode \n",
    "print(pd.isnull(vali_file.ItemCode).sum())         # Checking null values in ItemCode \n",
    "print(pd.isnull(vali_file.Week).sum())             # Checking null values in Week \n",
    "print(pd.isnull(vali_file.WeeklySales).sum())      # Checking null values in WeeklySales\n",
    "\n",
    "# test set\n",
    "print(pd.isnull(test_file.CategoryCode).sum())     # Checking null values in CategoryCode \n",
    "print(pd.isnull(test_file.ItemCode).sum())         # Checking null values in ItemCode \n",
    "print(pd.isnull(test_file.Week).sum())             # Checking null values in Week "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.106405,
     "end_time": "2022-03-28T08:55:40.196657",
     "exception": false,
     "start_time": "2022-03-28T08:55:40.090252",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "There is no missing data in any of the columns. Therefore, there are no missing data inputs we have to impute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:40.425770Z",
     "iopub.status.busy": "2022-03-28T08:55:40.425162Z",
     "iopub.status.idle": "2022-03-28T08:55:40.430076Z",
     "shell.execute_reply": "2022-03-28T08:55:40.430638Z",
     "shell.execute_reply.started": "2022-03-28T08:53:55.155154Z"
    },
    "papermill": {
     "duration": 0.121609,
     "end_time": "2022-03-28T08:55:40.430777",
     "exception": false,
     "start_time": "2022-03-28T08:55:40.309168",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CategoryCode    object\n",
       "ItemCode         int64\n",
       "DateID          object\n",
       "DailySales       int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# data types in train data\n",
    "train_file.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:40.648185Z",
     "iopub.status.busy": "2022-03-28T08:55:40.647555Z",
     "iopub.status.idle": "2022-03-28T08:55:40.651337Z",
     "shell.execute_reply": "2022-03-28T08:55:40.652210Z",
     "shell.execute_reply.started": "2022-03-28T08:53:55.294904Z"
    },
    "papermill": {
     "duration": 0.114307,
     "end_time": "2022-03-28T08:55:40.652454",
     "exception": false,
     "start_time": "2022-03-28T08:55:40.538147",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# creating copies to the data files we use\n",
    "train = train_file.copy()\n",
    "vali = vali_file.copy()\n",
    "test = test_file.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.108881,
     "end_time": "2022-03-28T08:55:40.871204",
     "exception": false,
     "start_time": "2022-03-28T08:55:40.762323",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Handling of the Date Variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.106809,
     "end_time": "2022-03-28T08:55:41.086187",
     "exception": false,
     "start_time": "2022-03-28T08:55:40.979378",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Since our Test and Validation Data mainly require No of Sales value in quantity units per week, we shall convert our 'DateID' column into Week format.\n",
    "\n",
    "We could use Month as a feature but it will be directly related to the Week number of the year. Hence using only the Week number should be sufficient.\n",
    "\n",
    "Weeks from 39 to 52 represent data collected during the year 2021 and Weeks from 1 to 10 represent the data collected in the year 2022.\n",
    "\n",
    "To allow continuity of the date data from 2021 to 2022, the weeks in the year 2022 (given as 1 to 10) will be adjusted to by adding 52 to each of them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:41.303334Z",
     "iopub.status.busy": "2022-03-28T08:55:41.302695Z",
     "iopub.status.idle": "2022-03-28T08:55:41.330759Z",
     "shell.execute_reply": "2022-03-28T08:55:41.331354Z",
     "shell.execute_reply.started": "2022-03-28T08:53:55.424764Z"
    },
    "papermill": {
     "duration": 0.138301,
     "end_time": "2022-03-28T08:55:41.331539",
     "exception": false,
     "start_time": "2022-03-28T08:55:41.193238",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# converting time column in Training Data into a datetime object \n",
    "train['DateID'] = pd.to_datetime(train.DateID)\n",
    "\n",
    "# creating columns for month and week\n",
    "train['Week'] = train.DateID.dt.week"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:41.549861Z",
     "iopub.status.busy": "2022-03-28T08:55:41.549248Z",
     "iopub.status.idle": "2022-03-28T08:55:43.281554Z",
     "shell.execute_reply": "2022-03-28T08:55:43.282084Z",
     "shell.execute_reply.started": "2022-03-28T08:53:55.559880Z"
    },
    "papermill": {
     "duration": 1.842936,
     "end_time": "2022-03-28T08:55:43.282274",
     "exception": false,
     "start_time": "2022-03-28T08:55:41.439338",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# replacing the weeks given for 2022 (which are in the range of 1 to 10) into the raange of 53 to 62\n",
    "for idx in train.index:\n",
    "    if train.loc[idx,'Week'] <= 10:\n",
    "        train.loc[idx,'Week'] = train.loc[idx,'Week'] + 52"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:43.501088Z",
     "iopub.status.busy": "2022-03-28T08:55:43.500459Z",
     "iopub.status.idle": "2022-03-28T08:55:43.505501Z",
     "shell.execute_reply": "2022-03-28T08:55:43.506091Z",
     "shell.execute_reply.started": "2022-03-28T08:53:57.741317Z"
    },
    "papermill": {
     "duration": 0.116565,
     "end_time": "2022-03-28T08:55:43.506252",
     "exception": false,
     "start_time": "2022-03-28T08:55:43.389687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "52    1087\n",
       "51    1072\n",
       "48    1062\n",
       "54    1055\n",
       "49    1054\n",
       "50    1053\n",
       "47    1050\n",
       "53    1039\n",
       "45    1027\n",
       "57    1020\n",
       "46    1016\n",
       "55    1015\n",
       "56    1014\n",
       "43    1011\n",
       "44    1009\n",
       "40     992\n",
       "58     978\n",
       "41     974\n",
       "42     938\n",
       "39     455\n",
       "Name: Week, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.Week.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.108096,
     "end_time": "2022-03-28T08:55:43.722751",
     "exception": false,
     "start_time": "2022-03-28T08:55:43.614655",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We can see that incomplete week 39 (1st October - 3rd october 2021) has 455 datapoints while all the other weeks have values ranging from 900-1100.\n",
    "\n",
    "Therefore we can choose to omit the data points for week 39 from our training, or we can adjust proportionally the datapoints for each itemcode up to 7/3 times for the whole week instead of 3 days."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.108579,
     "end_time": "2022-03-28T08:55:43.941430",
     "exception": false,
     "start_time": "2022-03-28T08:55:43.832851",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For this method, we will remove the the data points from week 39."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:44.160968Z",
     "iopub.status.busy": "2022-03-28T08:55:44.160354Z",
     "iopub.status.idle": "2022-03-28T08:55:44.175240Z",
     "shell.execute_reply": "2022-03-28T08:55:44.175816Z",
     "shell.execute_reply.started": "2022-03-28T08:53:57.751796Z"
    },
    "papermill": {
     "duration": 0.126767,
     "end_time": "2022-03-28T08:55:44.175970",
     "exception": false,
     "start_time": "2022-03-28T08:55:44.049203",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>DateID</th>\n",
       "      <th>DailySales</th>\n",
       "      <th>Week</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>category_2</td>\n",
       "      <td>117610</td>\n",
       "      <td>2021-11-06</td>\n",
       "      <td>7</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>category_4</td>\n",
       "      <td>836584</td>\n",
       "      <td>2021-11-18</td>\n",
       "      <td>16</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>category_1</td>\n",
       "      <td>370195</td>\n",
       "      <td>2022-01-24</td>\n",
       "      <td>6</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>category_2</td>\n",
       "      <td>172582</td>\n",
       "      <td>2021-10-30</td>\n",
       "      <td>5</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1006009</td>\n",
       "      <td>2021-10-30</td>\n",
       "      <td>5</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19912</th>\n",
       "      <td>category_2</td>\n",
       "      <td>75886</td>\n",
       "      <td>2021-10-04</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19915</th>\n",
       "      <td>category_1</td>\n",
       "      <td>36898</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19916</th>\n",
       "      <td>category_2</td>\n",
       "      <td>225259</td>\n",
       "      <td>2021-10-04</td>\n",
       "      <td>4</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19917</th>\n",
       "      <td>category_2</td>\n",
       "      <td>111436</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19920</th>\n",
       "      <td>category_1</td>\n",
       "      <td>371104</td>\n",
       "      <td>2021-10-04</td>\n",
       "      <td>4</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19466 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      CategoryCode  ItemCode     DateID  DailySales  Week\n",
       "0       category_2    117610 2021-11-06           7    44\n",
       "1       category_4    836584 2021-11-18          16    46\n",
       "2       category_1    370195 2022-01-24           6    56\n",
       "3       category_2    172582 2021-10-30           5    43\n",
       "4       category_2   1006009 2021-10-30           5    43\n",
       "...            ...       ...        ...         ...   ...\n",
       "19912   category_2     75886 2021-10-04           1    40\n",
       "19915   category_1     36898 2021-10-12           1    41\n",
       "19916   category_2    225259 2021-10-04           4    40\n",
       "19917   category_2    111436 2021-10-12           1    41\n",
       "19920   category_1    371104 2021-10-04           4    40\n",
       "\n",
       "[19466 rows x 5 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## saving a copy of the data for further analysis on sales across the days in the week \n",
    "WeekdayTrain = train.copy()\n",
    "\n",
    "train = train.loc[train.Week > 39]\n",
    "train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.109225,
     "end_time": "2022-03-28T08:55:44.394223",
     "exception": false,
     "start_time": "2022-03-28T08:55:44.284998",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Adding a variable to indiacte the Week Number of a date with respect to its Month"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.109288,
     "end_time": "2022-03-28T08:55:44.613379",
     "exception": false,
     "start_time": "2022-03-28T08:55:44.504091",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Since there maybe patterns in how purchases occur during a month, we might find more sales for certain weeks in the month (such as during the first few days or near the end of a month).\n",
    "\n",
    "Therefore we will create a feature to obtain the week number of the record date with respect to its month. (Week of the Month)\n",
    "\n",
    "We will consider the week containing the first day of the month as week number 1 for each month."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:44.836081Z",
     "iopub.status.busy": "2022-03-28T08:55:44.835258Z",
     "iopub.status.idle": "2022-03-28T08:55:52.188241Z",
     "shell.execute_reply": "2022-03-28T08:55:52.188795Z",
     "shell.execute_reply.started": "2022-03-28T08:53:57.779167Z"
    },
    "papermill": {
     "duration": 7.465941,
     "end_time": "2022-03-28T08:55:52.188969",
     "exception": false,
     "start_time": "2022-03-28T08:55:44.723028",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>DateID</th>\n",
       "      <th>DailySales</th>\n",
       "      <th>Week</th>\n",
       "      <th>FirstDay</th>\n",
       "      <th>FirstWeekNum</th>\n",
       "      <th>WeekOfMonth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>category_2</td>\n",
       "      <td>117610</td>\n",
       "      <td>2021-11-06</td>\n",
       "      <td>7</td>\n",
       "      <td>44</td>\n",
       "      <td>2021-11-01</td>\n",
       "      <td>44</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>category_4</td>\n",
       "      <td>836584</td>\n",
       "      <td>2021-11-18</td>\n",
       "      <td>16</td>\n",
       "      <td>46</td>\n",
       "      <td>2021-11-01</td>\n",
       "      <td>44</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>category_1</td>\n",
       "      <td>370195</td>\n",
       "      <td>2022-01-24</td>\n",
       "      <td>6</td>\n",
       "      <td>56</td>\n",
       "      <td>2022-01-01</td>\n",
       "      <td>52</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>category_2</td>\n",
       "      <td>172582</td>\n",
       "      <td>2021-10-30</td>\n",
       "      <td>5</td>\n",
       "      <td>43</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>39</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1006009</td>\n",
       "      <td>2021-10-30</td>\n",
       "      <td>5</td>\n",
       "      <td>43</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>39</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19912</th>\n",
       "      <td>category_2</td>\n",
       "      <td>75886</td>\n",
       "      <td>2021-10-04</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>39</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19915</th>\n",
       "      <td>category_1</td>\n",
       "      <td>36898</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>39</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19916</th>\n",
       "      <td>category_2</td>\n",
       "      <td>225259</td>\n",
       "      <td>2021-10-04</td>\n",
       "      <td>4</td>\n",
       "      <td>40</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>39</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19917</th>\n",
       "      <td>category_2</td>\n",
       "      <td>111436</td>\n",
       "      <td>2021-10-12</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>39</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19920</th>\n",
       "      <td>category_1</td>\n",
       "      <td>371104</td>\n",
       "      <td>2021-10-04</td>\n",
       "      <td>4</td>\n",
       "      <td>40</td>\n",
       "      <td>2021-10-01</td>\n",
       "      <td>39</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19466 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      CategoryCode  ItemCode     DateID  DailySales  Week   FirstDay  \\\n",
       "0       category_2    117610 2021-11-06           7    44 2021-11-01   \n",
       "1       category_4    836584 2021-11-18          16    46 2021-11-01   \n",
       "2       category_1    370195 2022-01-24           6    56 2022-01-01   \n",
       "3       category_2    172582 2021-10-30           5    43 2021-10-01   \n",
       "4       category_2   1006009 2021-10-30           5    43 2021-10-01   \n",
       "...            ...       ...        ...         ...   ...        ...   \n",
       "19912   category_2     75886 2021-10-04           1    40 2021-10-01   \n",
       "19915   category_1     36898 2021-10-12           1    41 2021-10-01   \n",
       "19916   category_2    225259 2021-10-04           4    40 2021-10-01   \n",
       "19917   category_2    111436 2021-10-12           1    41 2021-10-01   \n",
       "19920   category_1    371104 2021-10-04           4    40 2021-10-01   \n",
       "\n",
       "       FirstWeekNum  WeekOfMonth  \n",
       "0                44            1  \n",
       "1                44            3  \n",
       "2                52            5  \n",
       "3                39            5  \n",
       "4                39            5  \n",
       "...             ...          ...  \n",
       "19912            39            2  \n",
       "19915            39            3  \n",
       "19916            39            2  \n",
       "19917            39            3  \n",
       "19920            39            2  \n",
       "\n",
       "[19466 rows x 8 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Finding the first day of the given month\n",
    "for idx in train.index: \n",
    "    train.loc[idx,'FirstDay'] = train.loc[idx,'DateID'].replace(day=1)\n",
    "\n",
    "## Finding the week number of the 1st wrt the year\n",
    "train['FirstWeekNum'] = train.FirstDay.dt.week\n",
    "\n",
    "# replacing the weeks given for 2022 (which are in the range of 1 to 10) into the raange of 53 to 62\n",
    "for idx in train.index:\n",
    "    if train.loc[idx,'FirstWeekNum'] <= 10:\n",
    "        train.loc[idx,'FirstWeekNum'] = train.loc[idx,'FirstWeekNum'] + 52\n",
    "\n",
    "## Obtaining the Week of the Month\n",
    "train['WeekOfMonth'] = train.Week - train.FirstWeekNum + 1\n",
    "train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.110034,
     "end_time": "2022-03-28T08:55:52.410565",
     "exception": false,
     "start_time": "2022-03-28T08:55:52.300531",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Handling the date (Week) variable in the validation data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:52.639536Z",
     "iopub.status.busy": "2022-03-28T08:55:52.638763Z",
     "iopub.status.idle": "2022-03-28T08:55:52.640307Z",
     "shell.execute_reply": "2022-03-28T08:55:52.640834Z",
     "shell.execute_reply.started": "2022-03-28T08:54:07.223598Z"
    },
    "papermill": {
     "duration": 0.119115,
     "end_time": "2022-03-28T08:55:52.641003",
     "exception": false,
     "start_time": "2022-03-28T08:55:52.521888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# adding the date features into test data\n",
    "vali['Week'] = vali.Week.replace(\"w1\",59)    #  7th week of 2022\n",
    "vali['Week'] = vali.Week.replace(\"w2\",60)    #  8th week of 2022\n",
    "vali['Week'] = vali.Week.replace(\"w3\",61)    #  9th week of 2022\n",
    "vali['Week'] = vali.Week.replace(\"w4\",62)    # 10th week of 2022"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:52.877548Z",
     "iopub.status.busy": "2022-03-28T08:55:52.876674Z",
     "iopub.status.idle": "2022-03-28T08:55:52.972252Z",
     "shell.execute_reply": "2022-03-28T08:55:52.972638Z",
     "shell.execute_reply.started": "2022-03-28T08:54:07.232735Z"
    },
    "papermill": {
     "duration": 0.20928,
     "end_time": "2022-03-28T08:55:52.972793",
     "exception": false,
     "start_time": "2022-03-28T08:55:52.763513",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# adding values for the Week of the Month column\n",
    "for idx in vali.index:\n",
    "    if vali.loc[idx,'Week'] == 59:              # 14th Feb to 20th Feb\n",
    "        vali.loc[idx,'WeekOfMonth'] = 3\n",
    "    elif vali.loc[idx,'Week'] == 60:            # 21st Feb to 27th Feb\n",
    "        vali.loc[idx,'WeekOfMonth'] = 4\n",
    "    elif vali.loc[idx,'Week'] == 61:            # 28th Feb to 6th Mar\n",
    "        vali.loc[idx,'WeekOfMonth'] = 1             # We will approximate this week as the first week of March\n",
    "    elif vali.loc[idx,'Week'] == 62:            # 7th Feb to 13th Mar\n",
    "        vali.loc[idx,'WeekOfMonth'] = 2\n",
    "        \n",
    "vali.WeekOfMonth = vali.WeekOfMonth.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:53.117523Z",
     "iopub.status.busy": "2022-03-28T08:55:53.116852Z",
     "iopub.status.idle": "2022-03-28T08:55:53.129647Z",
     "shell.execute_reply": "2022-03-28T08:55:53.130052Z",
     "shell.execute_reply.started": "2022-03-28T08:54:07.363373Z"
    },
    "papermill": {
     "duration": 0.08669,
     "end_time": "2022-03-28T08:55:53.130203",
     "exception": false,
     "start_time": "2022-03-28T08:55:53.043513",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>Week</th>\n",
       "      <th>WeeklySales</th>\n",
       "      <th>WeekOfMonth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1044502</td>\n",
       "      <td>59</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1105009</td>\n",
       "      <td>59</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>category_2</td>\n",
       "      <td>913561</td>\n",
       "      <td>62</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>category_1</td>\n",
       "      <td>1048975</td>\n",
       "      <td>62</td>\n",
       "      <td>30</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>category_1</td>\n",
       "      <td>17287</td>\n",
       "      <td>60</td>\n",
       "      <td>60</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>365</th>\n",
       "      <td>category_2</td>\n",
       "      <td>124954</td>\n",
       "      <td>60</td>\n",
       "      <td>43</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>366</th>\n",
       "      <td>category_2</td>\n",
       "      <td>40759</td>\n",
       "      <td>59</td>\n",
       "      <td>48</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>367</th>\n",
       "      <td>category_1</td>\n",
       "      <td>1090303</td>\n",
       "      <td>59</td>\n",
       "      <td>19</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>368</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1090276</td>\n",
       "      <td>61</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>369</th>\n",
       "      <td>category_1</td>\n",
       "      <td>3418</td>\n",
       "      <td>62</td>\n",
       "      <td>69</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>370 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    CategoryCode  ItemCode  Week  WeeklySales  WeekOfMonth\n",
       "0     category_2   1044502    59           11            3\n",
       "1     category_2   1105009    59           11            3\n",
       "2     category_2    913561    62            5            2\n",
       "3     category_1   1048975    62           30            2\n",
       "4     category_1     17287    60           60            4\n",
       "..           ...       ...   ...          ...          ...\n",
       "365   category_2    124954    60           43            4\n",
       "366   category_2     40759    59           48            3\n",
       "367   category_1   1090303    59           19            3\n",
       "368   category_2   1090276    61            6            1\n",
       "369   category_1      3418    62           69            2\n",
       "\n",
       "[370 rows x 5 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vali"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.071106,
     "end_time": "2022-03-28T08:55:53.273326",
     "exception": false,
     "start_time": "2022-03-28T08:55:53.202220",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Handling the date (Week) variable in the test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:53.420265Z",
     "iopub.status.busy": "2022-03-28T08:55:53.419619Z",
     "iopub.status.idle": "2022-03-28T08:55:53.426747Z",
     "shell.execute_reply": "2022-03-28T08:55:53.427172Z",
     "shell.execute_reply.started": "2022-03-28T08:54:07.380842Z"
    },
    "papermill": {
     "duration": 0.082072,
     "end_time": "2022-03-28T08:55:53.427305",
     "exception": false,
     "start_time": "2022-03-28T08:55:53.345233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# adding the date features into test data\n",
    "test['Week'] = test.Week.replace(\"w1\",59)    #  7th week of 2022\n",
    "test['Week'] = test.Week.replace(\"w2\",60)    #  8th week of 2022\n",
    "test['Week'] = test.Week.replace(\"w3\",61)    #  9th week of 2022\n",
    "test['Week'] = test.Week.replace(\"w4\",62)    # 10th week of 2022"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:53.573563Z",
     "iopub.status.busy": "2022-03-28T08:55:53.572847Z",
     "iopub.status.idle": "2022-03-28T08:55:53.701065Z",
     "shell.execute_reply": "2022-03-28T08:55:53.701496Z",
     "shell.execute_reply.started": "2022-03-28T08:54:07.391227Z"
    },
    "papermill": {
     "duration": 0.202608,
     "end_time": "2022-03-28T08:55:53.701651",
     "exception": false,
     "start_time": "2022-03-28T08:55:53.499043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# adding values for the Week of the Month column\n",
    "for idx in test.index:\n",
    "    if test.loc[idx,'Week'] == 59:              # 14th Feb to 20th Feb\n",
    "        test.loc[idx,'WeekOfMonth'] = 3\n",
    "    elif test.loc[idx,'Week'] == 60:            # 21st Feb to 27th Feb\n",
    "        test.loc[idx,'WeekOfMonth'] = 4\n",
    "    elif test.loc[idx,'Week'] == 61:            # 28th Feb to 6th Mar\n",
    "        test.loc[idx,'WeekOfMonth'] = 1             # We will approximate this week as the first week of March\n",
    "    elif test.loc[idx,'Week'] == 62:            # 7th Feb to 13th Mar\n",
    "        test.loc[idx,'WeekOfMonth'] = 2\n",
    "        \n",
    "test.WeekOfMonth = test.WeekOfMonth.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:53.846743Z",
     "iopub.status.busy": "2022-03-28T08:55:53.846082Z",
     "iopub.status.idle": "2022-03-28T08:55:53.859928Z",
     "shell.execute_reply": "2022-03-28T08:55:53.860343Z",
     "shell.execute_reply.started": "2022-03-28T08:54:07.518466Z"
    },
    "papermill": {
     "duration": 0.087928,
     "end_time": "2022-03-28T08:55:53.860495",
     "exception": false,
     "start_time": "2022-03-28T08:55:53.772567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>Week</th>\n",
       "      <th>PredictedSales</th>\n",
       "      <th>WeekOfMonth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>category_1</td>\n",
       "      <td>43738</td>\n",
       "      <td>62</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1006090</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1076929</td>\n",
       "      <td>62</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>category_1</td>\n",
       "      <td>1081321</td>\n",
       "      <td>61</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>category_2</td>\n",
       "      <td>216151</td>\n",
       "      <td>62</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>372</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1101571</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>373</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1090258</td>\n",
       "      <td>62</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>374</th>\n",
       "      <td>category_2</td>\n",
       "      <td>906595</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>375</th>\n",
       "      <td>category_2</td>\n",
       "      <td>32245</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376</th>\n",
       "      <td>category_2</td>\n",
       "      <td>1006090</td>\n",
       "      <td>60</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>377 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    CategoryCode  ItemCode  Week  PredictedSales  WeekOfMonth\n",
       "0     category_1     43738    62             NaN            2\n",
       "1     category_2   1006090    59             NaN            3\n",
       "2     category_2   1076929    62             NaN            2\n",
       "3     category_1   1081321    61             NaN            1\n",
       "4     category_2    216151    62             NaN            2\n",
       "..           ...       ...   ...             ...          ...\n",
       "372   category_2   1101571    59             NaN            3\n",
       "373   category_2   1090258    62             NaN            2\n",
       "374   category_2    906595    59             NaN            3\n",
       "375   category_2     32245    59             NaN            3\n",
       "376   category_2   1006090    60             NaN            4\n",
       "\n",
       "[377 rows x 5 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.07158,
     "end_time": "2022-03-28T08:55:54.004798",
     "exception": false,
     "start_time": "2022-03-28T08:55:53.933218",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Creating a Dataframe for where Sales data are recorded weekly"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.070508,
     "end_time": "2022-03-28T08:55:54.147967",
     "exception": false,
     "start_time": "2022-03-28T08:55:54.077459",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Since our test data and validation data both use the week as the unit time frame, let us restructure our dataframe so that instead of units sold on a daily basis (DailySales) , we will use the units sold on a weekly basis (WeeklySales)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:54.294983Z",
     "iopub.status.busy": "2022-03-28T08:55:54.294418Z",
     "iopub.status.idle": "2022-03-28T08:55:54.314518Z",
     "shell.execute_reply": "2022-03-28T08:55:54.314984Z",
     "shell.execute_reply.started": "2022-03-28T08:54:07.538236Z"
    },
    "papermill": {
     "duration": 0.096885,
     "end_time": "2022-03-28T08:55:54.315126",
     "exception": false,
     "start_time": "2022-03-28T08:55:54.218241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Week</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">40</th>\n",
       "      <th>3418</th>\n",
       "      <th>category_1</th>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1032550</th>\n",
       "      <th>category_1</th>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1032559</th>\n",
       "      <th>category_1</th>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1032568</th>\n",
       "      <th>category_1</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1032586</th>\n",
       "      <th>category_1</th>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">58</th>\n",
       "      <th>211309</th>\n",
       "      <th>category_2</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>213802</th>\n",
       "      <th>category_2</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216151</th>\n",
       "      <th>category_2</th>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145978</th>\n",
       "      <th>category_1</th>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1105027</th>\n",
       "      <th>category_2</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3593 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            sum\n",
       "Week ItemCode CategoryCode     \n",
       "40   3418     category_1     42\n",
       "     1032550  category_1     16\n",
       "     1032559  category_1     17\n",
       "     1032568  category_1     10\n",
       "     1032586  category_1     21\n",
       "...                         ...\n",
       "58   211309   category_2     14\n",
       "     213802   category_2      7\n",
       "     216151   category_2     13\n",
       "     145978   category_1     32\n",
       "     1105027  category_2     14\n",
       "\n",
       "[3593 rows x 1 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Grouping the data rows based on both ItemCode and Week and the Category Code\n",
    "\n",
    "train_grouped = train.groupby(['Week', 'ItemCode', 'CategoryCode']).DailySales.agg([sum])\n",
    "train_grouped.sort_values(by='Week')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:54.463030Z",
     "iopub.status.busy": "2022-03-28T08:55:54.462515Z",
     "iopub.status.idle": "2022-03-28T08:55:54.468266Z",
     "shell.execute_reply": "2022-03-28T08:55:54.468706Z",
     "shell.execute_reply.started": "2022-03-28T08:54:07.565864Z"
    },
    "papermill": {
     "duration": 0.080163,
     "end_time": "2022-03-28T08:55:54.468821",
     "exception": false,
     "start_time": "2022-03-28T08:55:54.388658",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Resetting the index\n",
    "train_grouped = train_grouped.reset_index()\n",
    "train_grouped['WeekOfMonth'] = train['WeekOfMonth']\n",
    "train = train_grouped"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.071506,
     "end_time": "2022-03-28T08:55:54.612182",
     "exception": false,
     "start_time": "2022-03-28T08:55:54.540676",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "There will be some records in the WeekOfMonth column returning as Null. These records are those that belong to Sales being made in the 6th week of a month. (i.e. Sales made on 30th or 31st of a month.) Hence all the null values in the WeekOfMonth column will replaced with 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:54.758467Z",
     "iopub.status.busy": "2022-03-28T08:55:54.757812Z",
     "iopub.status.idle": "2022-03-28T08:55:54.761885Z",
     "shell.execute_reply": "2022-03-28T08:55:54.762314Z",
     "shell.execute_reply.started": "2022-03-28T08:54:07.575927Z"
    },
    "papermill": {
     "duration": 0.078645,
     "end_time": "2022-03-28T08:55:54.762435",
     "exception": false,
     "start_time": "2022-03-28T08:55:54.683790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## replacing the null values in WeekOfMonth column with 6\n",
    "train[\"WeekOfMonth\"].fillna(6, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:54.911426Z",
     "iopub.status.busy": "2022-03-28T08:55:54.910687Z",
     "iopub.status.idle": "2022-03-28T08:55:54.914710Z",
     "shell.execute_reply": "2022-03-28T08:55:54.915134Z",
     "shell.execute_reply.started": "2022-03-28T08:54:07.585408Z"
    },
    "papermill": {
     "duration": 0.081136,
     "end_time": "2022-03-28T08:55:54.915282",
     "exception": false,
     "start_time": "2022-03-28T08:55:54.834146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train.WeekOfMonth = train.WeekOfMonth.astype(int)\n",
    "\n",
    "# renaming the sum column into Weekly Sales\n",
    "\n",
    "train['WeeklySales'] = train['sum']\n",
    "train.drop('sum',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:55.064278Z",
     "iopub.status.busy": "2022-03-28T08:55:55.063636Z",
     "iopub.status.idle": "2022-03-28T08:55:55.074144Z",
     "shell.execute_reply": "2022-03-28T08:55:55.073625Z",
     "shell.execute_reply.started": "2022-03-28T08:54:07.600889Z"
    },
    "papermill": {
     "duration": 0.085643,
     "end_time": "2022-03-28T08:55:55.074259",
     "exception": false,
     "start_time": "2022-03-28T08:55:54.988616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Week</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>CategoryCode</th>\n",
       "      <th>WeekOfMonth</th>\n",
       "      <th>WeeklySales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40</td>\n",
       "      <td>3418</td>\n",
       "      <td>category_1</td>\n",
       "      <td>1</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>40</td>\n",
       "      <td>3427</td>\n",
       "      <td>category_1</td>\n",
       "      <td>3</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>40</td>\n",
       "      <td>7666</td>\n",
       "      <td>category_3</td>\n",
       "      <td>5</td>\n",
       "      <td>119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>40</td>\n",
       "      <td>9925</td>\n",
       "      <td>category_2</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>40</td>\n",
       "      <td>16936</td>\n",
       "      <td>category_3</td>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Week  ItemCode CategoryCode  WeekOfMonth  WeeklySales\n",
       "0    40      3418   category_1            1           42\n",
       "1    40      3427   category_1            3           40\n",
       "2    40      7666   category_3            5          119\n",
       "3    40      9925   category_2            5            9\n",
       "4    40     16936   category_3            5           25"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.072442,
     "end_time": "2022-03-28T08:55:55.219918",
     "exception": false,
     "start_time": "2022-03-28T08:55:55.147476",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Visualizations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:55.368592Z",
     "iopub.status.busy": "2022-03-28T08:55:55.368080Z",
     "iopub.status.idle": "2022-03-28T08:55:56.256171Z",
     "shell.execute_reply": "2022-03-28T08:55:56.256767Z",
     "shell.execute_reply.started": "2022-03-28T08:54:07.621099Z"
    },
    "papermill": {
     "duration": 0.963625,
     "end_time": "2022-03-28T08:55:56.256983",
     "exception": false,
     "start_time": "2022-03-28T08:55:55.293358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## importing libraries for data visualizations\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.112702,
     "end_time": "2022-03-28T08:55:56.483790",
     "exception": false,
     "start_time": "2022-03-28T08:55:56.371088",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### No of Unique Item Codes per Category Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:56.715275Z",
     "iopub.status.busy": "2022-03-28T08:55:56.714632Z",
     "iopub.status.idle": "2022-03-28T08:55:56.888692Z",
     "shell.execute_reply": "2022-03-28T08:55:56.889323Z",
     "shell.execute_reply.started": "2022-03-28T08:54:07.633989Z"
    },
    "papermill": {
     "duration": 0.290931,
     "end_time": "2022-03-28T08:55:56.889514",
     "exception": false,
     "start_time": "2022-03-28T08:55:56.598583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Number of Unique Items per Category')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Grouping the data rows based on Categories with unique ItemCodes\n",
    "df1 = pd.DataFrame()\n",
    "df1['UniqueProduct'] = train.groupby('CategoryCode').ItemCode.value_counts()\n",
    "df1 = df1.reset_index()\n",
    "\n",
    "## Visualizing the bar chart\n",
    "sns.histplot(data=df1, x=\"CategoryCode\")\n",
    "plt.ylabel('No of unique Item Codes')\n",
    "plt.title('Number of Unique Items per Category')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.11427,
     "end_time": "2022-03-28T08:55:57.118268",
     "exception": false,
     "start_time": "2022-03-28T08:55:57.003998",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The chart indicates that Category 2 has the largest variety of items among the other categories."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.114765,
     "end_time": "2022-03-28T08:55:57.348965",
     "exception": false,
     "start_time": "2022-03-28T08:55:57.234200",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Total Units sold in each Category "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:57.583263Z",
     "iopub.status.busy": "2022-03-28T08:55:57.582574Z",
     "iopub.status.idle": "2022-03-28T08:55:57.707635Z",
     "shell.execute_reply": "2022-03-28T08:55:57.708171Z",
     "shell.execute_reply.started": "2022-03-28T08:54:07.859031Z"
    },
    "papermill": {
     "duration": 0.24435,
     "end_time": "2022-03-28T08:55:57.708321",
     "exception": false,
     "start_time": "2022-03-28T08:55:57.463971",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Total Units Sold from each Category')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Grouping the data rows based on Categories with WeeklySales\n",
    "df2 = train.groupby(['CategoryCode']).WeeklySales.agg([sum])\n",
    "df2.sort_values(by='CategoryCode')\n",
    "df2 = df2.reset_index()\n",
    "df2['WeeklySales'] = df2['sum']\n",
    "df2.drop('sum',axis=1,inplace=True)\n",
    "\n",
    "## Visualizing the bar chart\n",
    "sns.barplot(x= 'CategoryCode' , y = 'WeeklySales' , data = df2)\n",
    "plt.title('Total Units Sold from each Category')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.07465,
     "end_time": "2022-03-28T08:55:57.857952",
     "exception": false,
     "start_time": "2022-03-28T08:55:57.783302",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Most of units that were sold belonged to the 1st Category. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.072901,
     "end_time": "2022-03-28T08:55:58.005836",
     "exception": false,
     "start_time": "2022-03-28T08:55:57.932935",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Average Units Sold on each Week of the Month"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.074006,
     "end_time": "2022-03-28T08:55:58.154818",
     "exception": false,
     "start_time": "2022-03-28T08:55:58.080812",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Trends in Sales in 1st, 2nd, 3rd, 4th, 5th and 6th weeks of a calendar month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:58.313620Z",
     "iopub.status.busy": "2022-03-28T08:55:58.313131Z",
     "iopub.status.idle": "2022-03-28T08:55:58.453438Z",
     "shell.execute_reply": "2022-03-28T08:55:58.454013Z",
     "shell.execute_reply.started": "2022-03-28T08:54:08.080188Z"
    },
    "papermill": {
     "duration": 0.225917,
     "end_time": "2022-03-28T08:55:58.454205",
     "exception": false,
     "start_time": "2022-03-28T08:55:58.228288",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Average Units Sold on each Week of the Month')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Grouping the data rows based on Week of the Month with WeeklySales\n",
    "df3 = train.groupby(['WeekOfMonth']).WeeklySales.agg(['mean'])\n",
    "df3.sort_values(by='WeekOfMonth')\n",
    "df3 = df3.reset_index()\n",
    "df3\n",
    "df3['WeeklySales'] = df3['mean']\n",
    "df3.drop('mean',axis=1,inplace=True)\n",
    "\n",
    "## Visualizing the bar chart\n",
    "sns.barplot(x= 'WeekOfMonth' , y = 'WeeklySales' , data = df3)\n",
    "plt.title('Average Units Sold on each Week of the Month')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.074617,
     "end_time": "2022-03-28T08:55:58.607552",
     "exception": false,
     "start_time": "2022-03-28T08:55:58.532935",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The above chart indicates that more units were sold within the first few weeks of a month, especially in the 1st week of the month. \n",
    "\n",
    "We can also see that there is a slight increase in units sold towards the very last few days in a month such as in the 6th week which generally represents weeks starting with 30th or 31st of a month."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.075355,
     "end_time": "2022-03-28T08:55:58.758220",
     "exception": false,
     "start_time": "2022-03-28T08:55:58.682865",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Analysis of Quantity of units sold across the days in the week"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.075608,
     "end_time": "2022-03-28T08:55:58.909419",
     "exception": false,
     "start_time": "2022-03-28T08:55:58.833811",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It would be valuable for the business by understanding the how the quantity of units sold varies across the week. We will be using the WeekdayTrain Dataframe which we copied previously."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:59.064701Z",
     "iopub.status.busy": "2022-03-28T08:55:59.064146Z",
     "iopub.status.idle": "2022-03-28T08:55:59.242798Z",
     "shell.execute_reply": "2022-03-28T08:55:59.242366Z",
     "shell.execute_reply.started": "2022-03-28T08:54:08.308352Z"
    },
    "papermill": {
     "duration": 0.257259,
     "end_time": "2022-03-28T08:55:59.242923",
     "exception": false,
     "start_time": "2022-03-28T08:55:58.985664",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Average Units Sold on each Day of the Week')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# adding a column for day of week.\n",
    "WeekdayTrain['DayOfWeek'] = WeekdayTrain.DateID.dt.dayofweek\n",
    "\n",
    "## obtaining the average quantity of items sold for each day of the week\n",
    "WeekDaySales = pd.DataFrame()\n",
    "WeekDaySales['AvgSales'] = WeekdayTrain.groupby('DayOfWeek').DailySales.mean()\n",
    "\n",
    "WeekDaySales = WeekDaySales.reset_index()\n",
    "\n",
    "# replacing the Day of Week column by their respective names\n",
    "WeekDaySales['DayOfWeek'] = WeekDaySales.DayOfWeek.replace(0,'Monday')\n",
    "WeekDaySales['DayOfWeek'] = WeekDaySales.DayOfWeek.replace(1,'Tuesday')\n",
    "WeekDaySales['DayOfWeek'] = WeekDaySales.DayOfWeek.replace(2,'Wednesday')\n",
    "WeekDaySales['DayOfWeek'] = WeekDaySales.DayOfWeek.replace(3,'Thursday')\n",
    "WeekDaySales['DayOfWeek'] = WeekDaySales.DayOfWeek.replace(4,'Friday')\n",
    "WeekDaySales['DayOfWeek'] = WeekDaySales.DayOfWeek.replace(5,'Saturday')\n",
    "WeekDaySales['DayOfWeek'] = WeekDaySales.DayOfWeek.replace(6,'Sunday')\n",
    "\n",
    "## Visualizing the bar chart\n",
    "sns.barplot(x = 'DayOfWeek' , y = 'AvgSales' , data = WeekDaySales)\n",
    "plt.title('Average Units Sold on each Day of the Week')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.075502,
     "end_time": "2022-03-28T08:55:59.394265",
     "exception": false,
     "start_time": "2022-03-28T08:55:59.318763",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The quantity of Units Sold steadily increases along the week as it peaks on Fridays. But during the weekend, less units have been sold compared to the rest of the week ."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.074842,
     "end_time": "2022-03-28T08:55:59.546703",
     "exception": false,
     "start_time": "2022-03-28T08:55:59.471861",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Trend of Units sold per week"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:55:59.709718Z",
     "iopub.status.busy": "2022-03-28T08:55:59.709240Z",
     "iopub.status.idle": "2022-03-28T08:55:59.879839Z",
     "shell.execute_reply": "2022-03-28T08:55:59.880275Z",
     "shell.execute_reply.started": "2022-03-28T08:54:08.567754Z"
    },
    "papermill": {
     "duration": 0.25645,
     "end_time": "2022-03-28T08:55:59.880412",
     "exception": false,
     "start_time": "2022-03-28T08:55:59.623962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Weekly Variation of Total Units Sold')"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Grouping the data rows based on Week with WeeklySales\n",
    "df4 = train.groupby(['Week']).WeeklySales.agg([sum])\n",
    "df4.sort_values(by='Week')\n",
    "df4 = df4.reset_index()\n",
    "df4['WeeklySales'] = df4['sum']\n",
    "df4.drop('sum',axis=1,inplace=True)\n",
    "\n",
    "## Visualizing the line chart\n",
    "sns.lineplot(x='Week' , y = 'WeeklySales' , data = df4)\n",
    "plt.title('Weekly Variation of Total Units Sold')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.078749,
     "end_time": "2022-03-28T08:56:00.036329",
     "exception": false,
     "start_time": "2022-03-28T08:55:59.957580",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Analysis of the number of units sold from Items belonging to Category 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:00.198085Z",
     "iopub.status.busy": "2022-03-28T08:56:00.197601Z",
     "iopub.status.idle": "2022-03-28T08:56:00.379749Z",
     "shell.execute_reply": "2022-03-28T08:56:00.379251Z",
     "shell.execute_reply.started": "2022-03-28T08:54:08.817442Z"
    },
    "papermill": {
     "duration": 0.265545,
     "end_time": "2022-03-28T08:56:00.379861",
     "exception": false,
     "start_time": "2022-03-28T08:56:00.114316",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'No of Units Sold in Category 1 per week')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Extracting the data related to category 1\n",
    "cat1 = train.loc[train.CategoryCode == 'category_1']\n",
    "\n",
    "cat1 = cat1.groupby(['Week']).WeeklySales.agg([sum])\n",
    "cat1.sort_values(by='Week')\n",
    "cat1 = cat1.reset_index()\n",
    "cat1['WeeklySales'] = cat1['sum']\n",
    "cat1.drop('sum',axis=1,inplace=True)\n",
    "\n",
    "## Visualizing the line chart\n",
    "sns.lineplot(x='Week' , y = 'WeeklySales' , data = cat1)\n",
    "plt.title('No of Units Sold in Category 1 per week')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.077895,
     "end_time": "2022-03-28T08:56:00.536053",
     "exception": false,
     "start_time": "2022-03-28T08:56:00.458158",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Analysis of the number of units sold from Items belonging to Category 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:00.695948Z",
     "iopub.status.busy": "2022-03-28T08:56:00.695358Z",
     "iopub.status.idle": "2022-03-28T08:56:00.874327Z",
     "shell.execute_reply": "2022-03-28T08:56:00.873857Z",
     "shell.execute_reply.started": "2022-03-28T08:54:09.080605Z"
    },
    "papermill": {
     "duration": 0.258926,
     "end_time": "2022-03-28T08:56:00.874447",
     "exception": false,
     "start_time": "2022-03-28T08:56:00.615521",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'No of Units Sold in Category 2 per week')"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Extracting the data related to Category 2\n",
    "cat2 = train.loc[train.CategoryCode == 'category_2']\n",
    "\n",
    "cat2 = cat2.groupby(['Week']).WeeklySales.agg([sum])\n",
    "cat2.sort_values(by='Week')\n",
    "cat2 = cat2.reset_index()\n",
    "cat2['WeeklySales'] = cat2['sum']\n",
    "cat2.drop('sum',axis=1,inplace=True)\n",
    "\n",
    "## Visualizing the line chart\n",
    "sns.lineplot(x='Week' , y = 'WeeklySales' , data = cat2)\n",
    "plt.title('No of Units Sold in Category 2 per week')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.080902,
     "end_time": "2022-03-28T08:56:01.036175",
     "exception": false,
     "start_time": "2022-03-28T08:56:00.955273",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Analysis of the number of units sold from Items belonging to Category 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:01.200372Z",
     "iopub.status.busy": "2022-03-28T08:56:01.199726Z",
     "iopub.status.idle": "2022-03-28T08:56:01.387887Z",
     "shell.execute_reply": "2022-03-28T08:56:01.388276Z",
     "shell.execute_reply.started": "2022-03-28T08:54:09.323538Z"
    },
    "papermill": {
     "duration": 0.271255,
     "end_time": "2022-03-28T08:56:01.388423",
     "exception": false,
     "start_time": "2022-03-28T08:56:01.117168",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'No of Units Sold in Category 3 per week')"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Extracting the data related to Category 3\n",
    "cat3 = train.loc[train.CategoryCode == 'category_3']\n",
    "\n",
    "cat3 = cat3.groupby(['Week']).WeeklySales.agg([sum])\n",
    "cat3.sort_values(by='Week')\n",
    "cat3 = cat3.reset_index()\n",
    "cat3['WeeklySales'] = cat3['sum']\n",
    "cat3.drop('sum',axis=1,inplace=True)\n",
    "\n",
    "## Visualizing the line chart\n",
    "sns.lineplot(x='Week' , y = 'WeeklySales' , data = cat3)\n",
    "plt.title('No of Units Sold in Category 3 per week')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.078804,
     "end_time": "2022-03-28T08:56:01.549104",
     "exception": false,
     "start_time": "2022-03-28T08:56:01.470300",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Analysis of the number of units sold from Items belonging to Category 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:01.714324Z",
     "iopub.status.busy": "2022-03-28T08:56:01.713689Z",
     "iopub.status.idle": "2022-03-28T08:56:01.882240Z",
     "shell.execute_reply": "2022-03-28T08:56:01.882785Z",
     "shell.execute_reply.started": "2022-03-28T08:54:09.583932Z"
    },
    "papermill": {
     "duration": 0.253051,
     "end_time": "2022-03-28T08:56:01.882960",
     "exception": false,
     "start_time": "2022-03-28T08:56:01.629909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'No of Units Sold in Category 4 per week')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Extracting the data related to Category 4\n",
    "cat4 = train.loc[train.CategoryCode == 'category_4']\n",
    "\n",
    "cat4 = cat4.groupby(['Week']).WeeklySales.agg([sum])\n",
    "cat4.sort_values(by='Week')\n",
    "cat4 = cat4.reset_index()\n",
    "cat4['WeeklySales'] = cat4['sum']\n",
    "cat4.drop('sum',axis=1,inplace=True)\n",
    "\n",
    "## Visualizing the line chart\n",
    "sns.lineplot(x='Week' , y = 'WeeklySales' , data = cat4)\n",
    "plt.title('No of Units Sold in Category 4 per week')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.128206,
     "end_time": "2022-03-28T08:56:02.139678",
     "exception": false,
     "start_time": "2022-03-28T08:56:02.011472",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Analysis & Trends of the number of units sold from Items for each Category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:02.397420Z",
     "iopub.status.busy": "2022-03-28T08:56:02.396768Z",
     "iopub.status.idle": "2022-03-28T08:56:03.006003Z",
     "shell.execute_reply": "2022-03-28T08:56:03.005486Z",
     "shell.execute_reply.started": "2022-03-28T08:54:09.787689Z"
    },
    "papermill": {
     "duration": 0.739205,
     "end_time": "2022-03-28T08:56:03.006133",
     "exception": false,
     "start_time": "2022-03-28T08:56:02.266928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Regression Plots of Weekly Sales from each Category')"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,8))\n",
    "\n",
    "# Combining all 4 categories of items for comparisions\n",
    "sns.regplot(x='Week' , y = 'WeeklySales' , data = cat1 , label = 'Category 1')\n",
    "sns.regplot(x='Week' , y = 'WeeklySales' , data = cat2 , label = 'Category 2')\n",
    "sns.regplot(x='Week' , y = 'WeeklySales' , data = cat3 , label = 'Category 3')\n",
    "sns.regplot(x='Week' , y = 'WeeklySales' , data = cat4 , label = 'Category 4')\n",
    "plt.legend()\n",
    "plt.title('Regression Plots of Weekly Sales from each Category')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.084226,
     "end_time": "2022-03-28T08:56:03.173852",
     "exception": false,
     "start_time": "2022-03-28T08:56:03.089626",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "According to the above line plots and the regression plot, quantity of units being sold in Category 1 have been gradually increasing over time. Whereas in the other categories, sale quantities have remained stagnant or have slightly decreased."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.083543,
     "end_time": "2022-03-28T08:56:03.340638",
     "exception": false,
     "start_time": "2022-03-28T08:56:03.257095",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### One hot encoding to add dummy variables for the Category Codes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:03.511648Z",
     "iopub.status.busy": "2022-03-28T08:56:03.511167Z",
     "iopub.status.idle": "2022-03-28T08:56:03.517121Z",
     "shell.execute_reply": "2022-03-28T08:56:03.517559Z",
     "shell.execute_reply.started": "2022-03-28T08:54:10.537341Z"
    },
    "papermill": {
     "duration": 0.092739,
     "end_time": "2022-03-28T08:56:03.517713",
     "exception": false,
     "start_time": "2022-03-28T08:56:03.424974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Using one-hot encoding to get dummy variables for the category the item belongs to\n",
    "# we can drop one of the columns from these dummy varibles. We will drop the first column\n",
    "\n",
    "categories_train = pd.get_dummies(train.CategoryCode, drop_first = True)\n",
    "categories_vali = pd.get_dummies(vali.CategoryCode, drop_first = True)\n",
    "categories_test = pd.get_dummies(test.CategoryCode, drop_first = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:03.692124Z",
     "iopub.status.busy": "2022-03-28T08:56:03.691470Z",
     "iopub.status.idle": "2022-03-28T08:56:03.698715Z",
     "shell.execute_reply": "2022-03-28T08:56:03.699294Z",
     "shell.execute_reply.started": "2022-03-28T08:54:10.552439Z"
    },
    "papermill": {
     "duration": 0.098605,
     "end_time": "2022-03-28T08:56:03.699468",
     "exception": false,
     "start_time": "2022-03-28T08:56:03.600863",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Adding the dummy variables for Item Categories\n",
    "train = pd.concat([train, categories_train], axis=1)\n",
    "vali = pd.concat([vali, categories_vali], axis=1)\n",
    "test = pd.concat([test, categories_test], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:03.883774Z",
     "iopub.status.busy": "2022-03-28T08:56:03.883296Z",
     "iopub.status.idle": "2022-03-28T08:56:03.888918Z",
     "shell.execute_reply": "2022-03-28T08:56:03.889393Z",
     "shell.execute_reply.started": "2022-03-28T08:54:10.565128Z"
    },
    "papermill": {
     "duration": 0.094023,
     "end_time": "2022-03-28T08:56:03.889507",
     "exception": false,
     "start_time": "2022-03-28T08:56:03.795484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Removing the original column for Category Codes\n",
    "train.drop('CategoryCode', axis=1, inplace = True)\n",
    "vali.drop('CategoryCode', axis=1, inplace = True)\n",
    "test.drop('CategoryCode', axis=1, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.085918,
     "end_time": "2022-03-28T08:56:04.060548",
     "exception": false,
     "start_time": "2022-03-28T08:56:03.974630",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Correlations with Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:04.232728Z",
     "iopub.status.busy": "2022-03-28T08:56:04.232255Z",
     "iopub.status.idle": "2022-03-28T08:56:04.700347Z",
     "shell.execute_reply": "2022-03-28T08:56:04.699841Z",
     "shell.execute_reply.started": "2022-03-28T08:54:10.583150Z"
    },
    "papermill": {
     "duration": 0.555617,
     "end_time": "2022-03-28T08:56:04.700459",
     "exception": false,
     "start_time": "2022-03-28T08:56:04.144842",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## correlation of all features with each other\n",
    "import seaborn as sns\n",
    "sns.heatmap(train.corr(), annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.082688,
     "end_time": "2022-03-28T08:56:04.868088",
     "exception": false,
     "start_time": "2022-03-28T08:56:04.785400",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Modelling the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.085347,
     "end_time": "2022-03-28T08:56:05.039417",
     "exception": false,
     "start_time": "2022-03-28T08:56:04.954070",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Selecting the features and Target variables from training set and validation set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.084787,
     "end_time": "2022-03-28T08:56:05.209791",
     "exception": false,
     "start_time": "2022-03-28T08:56:05.125004",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We will chose the following features for our Model Construction to predict Weekly quantities of Sales\n",
    "1. Week (of the year)\n",
    "2. ItemCode\n",
    "3. Category_2\n",
    "4. Category_3\n",
    "5. Category_4\n",
    "\n",
    "The feature WeekOfMonth (which indicated how many weeks in the month has passed by) will be omitted from this model attempt for these reasons\n",
    "1. MAPE scores have not improved significantly once the feature was included in previous attempts\n",
    "2. Week and WeekOfMonth features show a correlation of 0.34 to each other. Despite this being a low number, compared to the rest of the correlation values given in the correlation matrix above, it is a higher quantity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:05.383067Z",
     "iopub.status.busy": "2022-03-28T08:56:05.382598Z",
     "iopub.status.idle": "2022-03-28T08:56:05.387709Z",
     "shell.execute_reply": "2022-03-28T08:56:05.388193Z",
     "shell.execute_reply.started": "2022-03-28T08:54:11.119009Z"
    },
    "papermill": {
     "duration": 0.093363,
     "end_time": "2022-03-28T08:56:05.388322",
     "exception": false,
     "start_time": "2022-03-28T08:56:05.294959",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Training Set split\n",
    "Train_Y = train['WeeklySales']\n",
    "Train_X = train[['Week','ItemCode','category_2','category_3','category_4']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:05.563204Z",
     "iopub.status.busy": "2022-03-28T08:56:05.562677Z",
     "iopub.status.idle": "2022-03-28T08:56:05.565148Z",
     "shell.execute_reply": "2022-03-28T08:56:05.565507Z",
     "shell.execute_reply.started": "2022-03-28T08:54:11.128332Z"
    },
    "papermill": {
     "duration": 0.092049,
     "end_time": "2022-03-28T08:56:05.565629",
     "exception": false,
     "start_time": "2022-03-28T08:56:05.473580",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Validation Set split\n",
    "Vali_Y = vali['WeeklySales']\n",
    "Vali_X = vali[['Week','ItemCode','category_2','category_3','category_4']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.084494,
     "end_time": "2022-03-28T08:56:05.735780",
     "exception": false,
     "start_time": "2022-03-28T08:56:05.651286",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Random Forest Modelling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:05.922902Z",
     "iopub.status.busy": "2022-03-28T08:56:05.922243Z",
     "iopub.status.idle": "2022-03-28T08:56:06.283253Z",
     "shell.execute_reply": "2022-03-28T08:56:06.282554Z",
     "shell.execute_reply.started": "2022-03-28T08:54:11.141322Z"
    },
    "papermill": {
     "duration": 0.463211,
     "end_time": "2022-03-28T08:56:06.283434",
     "exception": false,
     "start_time": "2022-03-28T08:56:05.820223",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## importing Random Forest Regressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "## Importing the library to evaluate model performance - MAPE\n",
    "from sklearn.metrics import mean_absolute_percentage_error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.133392,
     "end_time": "2022-03-28T08:56:06.549321",
     "exception": false,
     "start_time": "2022-03-28T08:56:06.415929",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Having previously tested out the Decision Tree Model using optimized leaf nodes, we will apply Random Forest algorithm to test out our model.\n",
    "\n",
    "Previous MAPE scores for Decision Trees for the validation data\n",
    "1. without the Week of the Month variable - 0.7709228\n",
    "2. with the Week of the Month variable - 0.75983461 (corrected)\n",
    "\n",
    "Previous MAPE scores for Random Forest model for the validation data under default conditions - 0.723845026"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.13075,
     "end_time": "2022-03-28T08:56:06.812461",
     "exception": false,
     "start_time": "2022-03-28T08:56:06.681711",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We will use an utility function to find the best Random Forest Model with the optimal number of Decision Tree sizes (n_estimators condition) which outputs the lowest error (lowest Mean Absolute Percentage Error)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:07.004564Z",
     "iopub.status.busy": "2022-03-28T08:56:07.003958Z",
     "iopub.status.idle": "2022-03-28T08:56:07.008187Z",
     "shell.execute_reply": "2022-03-28T08:56:07.008641Z",
     "shell.execute_reply.started": "2022-03-28T08:54:11.159268Z"
    },
    "papermill": {
     "duration": 0.093437,
     "end_time": "2022-03-28T08:56:07.008783",
     "exception": false,
     "start_time": "2022-03-28T08:56:06.915346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## possible values to experiment for n_estimators\n",
    "candidate_n_estimators = [50,60,70,80,90,100,110,120,130,140,150]\n",
    "\n",
    "# utility function to test out models\n",
    "def get_mape(ForestNum, Train_X, Vali_X, Train_Y, Vali_Y):\n",
    "    T_Model = RandomForestRegressor(n_estimators = ForestNum, random_state=1)\n",
    "    \n",
    "    # applying the model and obatining our prediction\n",
    "    T_Model.fit(Train_X, Train_Y)\n",
    "    T_Pred_Y = T_Model.predict(Vali_X)\n",
    "    \n",
    "    # using mape to compare each model dependent on the leaf nodes\n",
    "    mape = mean_absolute_percentage_error(Vali_Y, T_Pred_Y).round(5)\n",
    "    print(ForestNum , mape)\n",
    "    return mape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:07.181759Z",
     "iopub.status.busy": "2022-03-28T08:56:07.181256Z",
     "iopub.status.idle": "2022-03-28T08:56:12.117202Z",
     "shell.execute_reply": "2022-03-28T08:56:12.117593Z",
     "shell.execute_reply.started": "2022-03-28T08:54:11.177586Z"
    },
    "papermill": {
     "duration": 5.023824,
     "end_time": "2022-03-28T08:56:12.117740",
     "exception": false,
     "start_time": "2022-03-28T08:56:07.093916",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50 0.67051\n",
      "60 0.66216\n",
      "70 0.65623\n",
      "80 0.65403\n",
      "90 0.65517\n",
      "100 0.65262\n",
      "110 0.6534\n",
      "120 0.6534\n",
      "130 0.64761\n",
      "140 0.64868\n",
      "150 0.64768\n",
      "\n",
      "Best value for n_estimators is 130\n"
     ]
    }
   ],
   "source": [
    "## a list of scores of MAPE and finding the lowest and mapping to the relevant value for n_estimators\n",
    "scores = {ForestNum : get_mape(ForestNum, Train_X, Vali_X, Train_Y, Vali_Y) for ForestNum in candidate_n_estimators}\n",
    "\n",
    "## obtaining the best value for n_estimators for the Random Forest using the above list\n",
    "best_n_estimators = min(scores, key=scores.get)\n",
    "print('')\n",
    "print('Best value for n_estimators is ' + str(best_n_estimators))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.089866,
     "end_time": "2022-03-28T08:56:12.295070",
     "exception": false,
     "start_time": "2022-03-28T08:56:12.205204",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Using the results of the above analysis we can now define the Random Forest Model for our data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:12.474171Z",
     "iopub.status.busy": "2022-03-28T08:56:12.473671Z",
     "iopub.status.idle": "2022-03-28T08:56:12.476013Z",
     "shell.execute_reply": "2022-03-28T08:56:12.475546Z",
     "shell.execute_reply.started": "2022-03-28T08:54:17.750042Z"
    },
    "papermill": {
     "duration": 0.093577,
     "end_time": "2022-03-28T08:56:12.476143",
     "exception": false,
     "start_time": "2022-03-28T08:56:12.382566",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## defining the Random Forest Model\n",
    "ForestModel = RandomForestRegressor(n_estimators = best_n_estimators , random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:12.662588Z",
     "iopub.status.busy": "2022-03-28T08:56:12.657010Z",
     "iopub.status.idle": "2022-03-28T08:56:13.223028Z",
     "shell.execute_reply": "2022-03-28T08:56:13.221920Z",
     "shell.execute_reply.started": "2022-03-28T08:54:17.757216Z"
    },
    "papermill": {
     "duration": 0.658999,
     "end_time": "2022-03-28T08:56:13.223258",
     "exception": false,
     "start_time": "2022-03-28T08:56:12.564259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(n_estimators=130, random_state=1)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## fitting the data to the Forest Model\n",
    "ForestModel.fit(Train_X , Train_Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:13.408525Z",
     "iopub.status.busy": "2022-03-28T08:56:13.408001Z",
     "iopub.status.idle": "2022-03-28T08:56:13.426964Z",
     "shell.execute_reply": "2022-03-28T08:56:13.426494Z",
     "shell.execute_reply.started": "2022-03-28T08:54:18.539007Z"
    },
    "papermill": {
     "duration": 0.115719,
     "end_time": "2022-03-28T08:56:13.427080",
     "exception": false,
     "start_time": "2022-03-28T08:56:13.311361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Deriving the predictions for the input features of the Validation dataset\n",
    "Pred_Vali = ForestModel.predict(Vali_X).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:13.610801Z",
     "iopub.status.busy": "2022-03-28T08:56:13.610205Z",
     "iopub.status.idle": "2022-03-28T08:56:13.612620Z",
     "shell.execute_reply": "2022-03-28T08:56:13.613002Z",
     "shell.execute_reply.started": "2022-03-28T08:54:18.570822Z"
    },
    "papermill": {
     "duration": 0.096505,
     "end_time": "2022-03-28T08:56:13.613176",
     "exception": false,
     "start_time": "2022-03-28T08:56:13.516671",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6372836634066691"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Applying the MAPE to the actual target data and predicted target data\n",
    "mean_absolute_percentage_error(Vali_Y, Pred_Vali)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.089559,
     "end_time": "2022-03-28T08:56:13.793517",
     "exception": false,
     "start_time": "2022-03-28T08:56:13.703958",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We can see a stark improvement in the Random Forest Model when the WeekOfMonth feature was omiited here. The MAPE score has decreased from 0.7243495 (with WeekOfMonth feature) to 0.6372836 (without the feature). The improvement in performance is about 12.02%."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.090826,
     "end_time": "2022-03-28T08:56:13.974817",
     "exception": false,
     "start_time": "2022-03-28T08:56:13.883991",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Analyzing Model Performance of Actual and Predicted Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:14.177437Z",
     "iopub.status.busy": "2022-03-28T08:56:14.163886Z",
     "iopub.status.idle": "2022-03-28T08:56:14.374857Z",
     "shell.execute_reply": "2022-03-28T08:56:14.375268Z",
     "shell.execute_reply.started": "2022-03-28T08:54:18.580040Z"
    },
    "papermill": {
     "duration": 0.311016,
     "end_time": "2022-03-28T08:56:14.375408",
     "exception": false,
     "start_time": "2022-03-28T08:56:14.064392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Actual Values vs Predicted Values')"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Dataframe to store Predicted and Actual values\n",
    "Residuals = pd.DataFrame()\n",
    "Residuals['Actual'] = Vali_Y\n",
    "Residuals['Predicted'] = Pred_Vali\n",
    "\n",
    "# visualizing a scatter plot to display Predicted vs Actual\n",
    "sns.scatterplot(x='Actual' , y = 'Predicted' , data = Residuals)\n",
    "\n",
    "# creating the baseline along y=x line\n",
    "plt.plot(Residuals.Actual, Residuals.Actual, linestyle='-', color='red')\n",
    "plt.ylim(0,400)\n",
    "plt.title('Actual Values vs Predicted Values')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:14.608982Z",
     "iopub.status.busy": "2022-03-28T08:56:14.608366Z",
     "iopub.status.idle": "2022-03-28T08:56:14.752626Z",
     "shell.execute_reply": "2022-03-28T08:56:14.752038Z",
     "shell.execute_reply.started": "2022-03-28T08:54:18.807333Z"
    },
    "papermill": {
     "duration": 0.28651,
     "end_time": "2022-03-28T08:56:14.752765",
     "exception": false,
     "start_time": "2022-03-28T08:56:14.466255",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Actual Values vs Predicted Values - (Zoomed in) (Actual < 300)')"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x='Actual' , y = 'Predicted' , data = Residuals)\n",
    "plt.plot(Residuals.Actual, Residuals.Actual, linestyle='-', color='red')\n",
    "plt.ylim(0,300)\n",
    "plt.xlim(0,300)\n",
    "plt.title('Actual Values vs Predicted Values - (Zoomed in) (Actual < 300)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.141998,
     "end_time": "2022-03-28T08:56:15.037795",
     "exception": false,
     "start_time": "2022-03-28T08:56:14.895797",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It is clear from the above scatter plot that larger values have deviated highly while smaller values have higher accuracies in prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.140354,
     "end_time": "2022-03-28T08:56:15.320000",
     "exception": false,
     "start_time": "2022-03-28T08:56:15.179646",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Applying the Model to the Test Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:15.607425Z",
     "iopub.status.busy": "2022-03-28T08:56:15.606612Z",
     "iopub.status.idle": "2022-03-28T08:56:15.609101Z",
     "shell.execute_reply": "2022-03-28T08:56:15.608591Z",
     "shell.execute_reply.started": "2022-03-28T08:54:19.018049Z"
    },
    "papermill": {
     "duration": 0.148042,
     "end_time": "2022-03-28T08:56:15.609249",
     "exception": false,
     "start_time": "2022-03-28T08:56:15.461207",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Obtaining the test dataset for forecasting\n",
    "test = test[['Week','ItemCode','category_2','category_3','category_4']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:15.816834Z",
     "iopub.status.busy": "2022-03-28T08:56:15.814328Z",
     "iopub.status.idle": "2022-03-28T08:56:15.835392Z",
     "shell.execute_reply": "2022-03-28T08:56:15.835804Z",
     "shell.execute_reply.started": "2022-03-28T08:54:19.026545Z"
    },
    "papermill": {
     "duration": 0.118513,
     "end_time": "2022-03-28T08:56:15.835977",
     "exception": false,
     "start_time": "2022-03-28T08:56:15.717464",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Applying the model to the test dataset and obtaining the data as integers\n",
    "Pred_Test = ForestModel.predict(test).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:16.022562Z",
     "iopub.status.busy": "2022-03-28T08:56:16.022053Z",
     "iopub.status.idle": "2022-03-28T08:56:16.023597Z",
     "shell.execute_reply": "2022-03-28T08:56:16.024004Z",
     "shell.execute_reply.started": "2022-03-28T08:54:19.066404Z"
    },
    "papermill": {
     "duration": 0.096112,
     "end_time": "2022-03-28T08:56:16.024191",
     "exception": false,
     "start_time": "2022-03-28T08:56:15.928079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission_file = pd.DataFrame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:16.212024Z",
     "iopub.status.busy": "2022-03-28T08:56:16.211458Z",
     "iopub.status.idle": "2022-03-28T08:56:16.216815Z",
     "shell.execute_reply": "2022-03-28T08:56:16.217287Z",
     "shell.execute_reply.started": "2022-03-28T08:54:19.073776Z"
    },
    "papermill": {
     "duration": 0.100798,
     "end_time": "2022-03-28T08:56:16.217430",
     "exception": false,
     "start_time": "2022-03-28T08:56:16.116632",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## creating submission dataset\n",
    "submission_file['ID'] = test_file['CategoryCode'].astype(str)+'_'+test_file['ItemCode'].astype(str)+'_'+test_file['Week']\n",
    "submission_file['WeeklySales'] = Pred_Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:16.404219Z",
     "iopub.status.busy": "2022-03-28T08:56:16.403725Z",
     "iopub.status.idle": "2022-03-28T08:56:16.411750Z",
     "shell.execute_reply": "2022-03-28T08:56:16.412195Z",
     "shell.execute_reply.started": "2022-03-28T08:54:19.091488Z"
    },
    "papermill": {
     "duration": 0.102053,
     "end_time": "2022-03-28T08:56:16.412312",
     "exception": false,
     "start_time": "2022-03-28T08:56:16.310259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>WeeklySales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>category_1_43738_w4</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>category_2_1006090_w1</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>category_2_1076929_w4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>category_1_1081321_w3</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>category_2_216151_w4</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>372</th>\n",
       "      <td>category_2_1101571_w1</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>373</th>\n",
       "      <td>category_2_1090258_w4</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>374</th>\n",
       "      <td>category_2_906595_w1</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>375</th>\n",
       "      <td>category_2_32245_w1</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376</th>\n",
       "      <td>category_2_1006090_w2</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>377 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                        ID  WeeklySales\n",
       "0      category_1_43738_w4           27\n",
       "1    category_2_1006090_w1           20\n",
       "2    category_2_1076929_w4            6\n",
       "3    category_1_1081321_w3            6\n",
       "4     category_2_216151_w4           14\n",
       "..                     ...          ...\n",
       "372  category_2_1101571_w1           15\n",
       "373  category_2_1090258_w4           29\n",
       "374   category_2_906595_w1            8\n",
       "375    category_2_32245_w1           50\n",
       "376  category_2_1006090_w2           20\n",
       "\n",
       "[377 rows x 2 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission_file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-03-28T08:56:16.600149Z",
     "iopub.status.busy": "2022-03-28T08:56:16.599623Z",
     "iopub.status.idle": "2022-03-28T08:56:16.605361Z",
     "shell.execute_reply": "2022-03-28T08:56:16.605783Z",
     "shell.execute_reply.started": "2022-03-28T08:54:19.112256Z"
    },
    "papermill": {
     "duration": 0.101768,
     "end_time": "2022-03-28T08:56:16.605919",
     "exception": false,
     "start_time": "2022-03-28T08:56:16.504151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "## Obtaining the solutions as a CSV file\n",
    "submission_file.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 46.141515,
   "end_time": "2022-03-28T08:56:17.307709",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-03-28T08:55:31.166194",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
